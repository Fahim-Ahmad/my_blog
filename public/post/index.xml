<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fahim Ahmad</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Fahim Ahmad</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Fahim Ahmad (2020)</copyright><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Fahim Ahmad</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Using Survey Weight</title>
      <link>/post/using-survey-weight-in-r/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>/post/using-survey-weight-in-r/</guid>
      <description>


&lt;p&gt;In R working with survey weight is made possible using &lt;code&gt;survey&lt;/code&gt; package. Let’s use below data frame as an exmaple here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1000)
age &amp;lt;- c(18:100)
age &amp;lt;- sample(age, 100, replace = TRUE)
gender &amp;lt;- c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;)
gender &amp;lt;- sample(gender, 100, replace = TRUE)
country &amp;lt;- c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;)
country &amp;lt;- sample(country, 100, replace = TRUE)

df &amp;lt;- data.frame(age, gender, country)

df$weight[df$gender==&amp;quot;Female&amp;quot;] &amp;lt;-50/sum(df$gender==&amp;quot;Female&amp;quot;)
df$weight[df$gender==&amp;quot;Male&amp;quot;] &amp;lt;-50/sum(df$gender==&amp;quot;Male&amp;quot;)

# summary of data
summary(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       age           gender            country              weight      
##  Min.   :18.00   Length:100         Length:100         Min.   :0.8929  
##  1st Qu.:38.75   Class :character   Class :character   1st Qu.:0.8929  
##  Median :54.50   Mode  :character   Mode  :character   Median :0.8929  
##  Mean   :55.79                                         Mean   :1.0000  
##  3rd Qu.:73.25                                         3rd Qu.:1.1364  
##  Max.   :97.00                                         Max.   :1.1364&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important variable here is the &lt;em&gt;weight&lt;/em&gt; variable which is constructed to balance the sex ratio.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;survey&lt;/code&gt; package, there is &lt;code&gt;svydesign()&lt;/code&gt; function that can be used to link a data frame with a weight.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;survey&amp;quot;)
library(survey)
df.w &amp;lt;- svydesign(ids = ~1, data = df, weights = ~weight)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting object is not a data frame anymore, but is a list of different objects that can be seen using &lt;code&gt;attributes()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attributes(df.w)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;cluster&amp;quot;    &amp;quot;strata&amp;quot;     &amp;quot;has.strata&amp;quot; &amp;quot;prob&amp;quot;       &amp;quot;allprob&amp;quot;   
## [6] &amp;quot;call&amp;quot;       &amp;quot;variables&amp;quot;  &amp;quot;fpc&amp;quot;        &amp;quot;pps&amp;quot;       
## 
## $class
## [1] &amp;quot;survey.design2&amp;quot; &amp;quot;survey.design&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, we need to use &lt;code&gt;survey&lt;/code&gt;’s own analytical functions. For example, here is a comparison of unweighted and weighted sex ratio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# unweighted
df %&amp;gt;%
{table(.$gender)} %&amp;gt;%
  prop.table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Female   Male 
##   0.44   0.56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# weighted
df.w %&amp;gt;%
  svytable(~gender, .) %&amp;gt;%
  prop.table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## gender
## Female   Male 
##    0.5    0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;svytable()&lt;/code&gt; can be used to create more than one-way frequency/percentage tables as well. For example, let’s create contingency table of &lt;code&gt;gender&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.w %&amp;gt;%
svytable(~gender+country, .) %&amp;gt;%
  prop.table(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         country
## gender           A         B
##   Female 0.5600000 0.4329897
##   Male   0.4400000 0.5670103&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below are other useful functions of &lt;code&gt;survey&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# to compute weighted mean
svymean(~age, df.w)
# to compute weighted quantiles
svyquantile(~age, df.w, c(.25, .50, .75))
# to compute weigted variance
svyvar(~age, df.w)
# to perform t-test
svyttest(age~gender, df.w)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Combining Multiple Plots using Patchwork</title>
      <link>/post/combining-multiple-plots-using-patchwork/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/combining-multiple-plots-using-patchwork/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#loading-required-packages&#34;&gt;loading required packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-example-plots&#34;&gt;creating example plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plots-using-the-patchwork-package&#34;&gt;Combining plots using the patchwork package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plots-beside-or-on-top-of-each-other&#34;&gt;Combining plots beside or on top of each other&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#controlling-the-legend&#34;&gt;Controlling the legend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-an-empty-area&#34;&gt;Adding an empty area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plot-and-table&#34;&gt;Combining plot and table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#annotation&#34;&gt;Annotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifying-the-result-of-the-patchwork&#34;&gt;Modifying the result of the patchwork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Data is just a collection of numbers until it is turned into a story. Sometimes, the combination of several plots is required for telling a great data-driven story.&lt;/p&gt;
&lt;p&gt;It is a while that I am using &lt;strong&gt;R&lt;/strong&gt; for data analysis and visualization and I have been using several packages for combining multiple plots. During this period, I found the &lt;strong&gt;patchwork&lt;/strong&gt; package the most straightforward way of combining multiple ggplot plots which I will explore it in this post.&lt;/p&gt;
&lt;div id=&#34;loading-required-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;loading required packages&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;patchwork&amp;quot;)
library(patchwork)
# install.packages(&amp;quot;gapminder&amp;quot;)
library(gapminder)
# install.packages(&amp;quot;dplyr&amp;quot;)
library(dplyr)
# install.packages()
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-example-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;creating example plots&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdpPercap_lifeExpt &amp;lt;- gapminder %&amp;gt;% 
  ggplot(aes(x=gdpPercap, y=lifeExp, col = continent)) +
  geom_point() + theme_bw() +
   labs(x = NULL, y = NULL)

lifeExpt_densityPlot &amp;lt;- gapminder %&amp;gt;%
  ggplot(aes(x=lifeExp, fill=continent)) +
  geom_density(alpha=0.4) + theme_bw() +
   labs(x = NULL, y = NULL)

lifeExpt_boxPlot &amp;lt;- gapminder %&amp;gt;% 
  ggplot(aes(x=continent, y=lifeExp, col=continent)) +
  geom_boxplot() +
  geom_jitter(width=0.2, alpha=0.4) + theme_bw() +
    labs(x = NULL, y = NULL)

gdpPercap_densityPlot &amp;lt;- gapminder %&amp;gt;%
  ggplot(aes(x = gdpPercap, fill = continent)) +
  geom_density(alpha = 0.4) + theme_bw() +
  labs(x = NULL, y = NULL)

gdpPercap_boxPlot &amp;lt;- gapminder %&amp;gt;% 
  ggplot(aes(x=continent, y=gdpPercap, col=continent)) +
  geom_boxplot() +
  geom_jitter(width=0.2, alpha=0.4) + theme_bw() +
    labs(x = NULL, y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plots-using-the-patchwork-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining plots using the patchwork package&lt;/h1&gt;
&lt;p&gt;Them most simple and straightforward way to combine plots is to use the &lt;code&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plots-beside-or-on-top-of-each-other&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining plots beside or on top of each other&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator combines plots without indicating anything about the desired layout. By default, the &lt;strong&gt;patchwork&lt;/strong&gt; package keeps the grid square and fill the grid in row order. This can be controlled by &lt;code&gt;plot_layout()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot +
  plot_layout(nrow = 3, byrow = F)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By having a one-row layout &lt;code&gt;plot_layout(nrow = 1)&lt;/code&gt; or one-column layout &lt;code&gt;plotlayout(ncol = 1)&lt;/code&gt;, plots can be placed on top of each other or beside each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Likewise, &lt;strong&gt;patchwork&lt;/strong&gt; provides two more operators. &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt; will place the plots beside each other, while &lt;code&gt;/&lt;/code&gt; will stack them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;controlling-the-legend&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Controlling the legend&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;plotlayout()&lt;/code&gt; function can also be used to place the legends in a common place instead of next to each plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot +
  plot_layout(nrow = 3, byrow = F, guides = &amp;#39;collect&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdpPercap_lifeExpt / ((lifeExpt_densityPlot / lifeExpt_boxPlot) | (gdpPercap_densityPlot / gdpPercap_boxPlot)) +
  plot_layout(guides = &amp;#39;collect&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-an-empty-area&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Adding an empty area&lt;/h1&gt;
&lt;p&gt;It is also possible to add an empty area between the plots by creating an empty &lt;em&gt;ggplot&lt;/em&gt; object using the &lt;code&gt;plot_spacer()&lt;/code&gt; and adding it to the patchwork.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / plot_spacer() / gdpPercap_lifeExpt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plot-and-table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining plot and table&lt;/h1&gt;
&lt;p&gt;Sometimes you may want to combine a non-ggplot content with a &lt;em&gt;ggplot&lt;/em&gt; plot. For instance, let’s combine the correlation table between life expectancy, GDP per capita, and population with the GDP per capita and life expectancy scatter plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;gridExtra&amp;quot;)
library(gridExtra)

correlation &amp;lt;- cor(gapminder[,c(4:6)], method = &amp;#39;pearson&amp;#39;) %&amp;gt;% round(digits = 3)
gdpPercap_lifeExpt / tableGrob(correlation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;annotation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Annotation&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;plot_annotation()&lt;/code&gt; function can be used to control different aspects of the annotation of the final plot such as title, subtitle, and caption.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + 
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(title = &amp;#39;THIS IS TITLE&amp;#39;, subtitle = &amp;#39;this is subtitle&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;plot_annotation()&lt;/code&gt; function also provide the &lt;code&gt;tag_levels&lt;/code&gt;, &lt;code&gt;tag_prefix&lt;/code&gt;, and &lt;code&gt;tag_suffix&lt;/code&gt; arguments for auto-tagging to identify the subplots in text.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tag_levels&lt;/strong&gt; = A character vector defining the enumeration format to use at each level. Possible values are ‘a’ for lowercase letters, ‘A’ for uppercase letters, ‘1’ for numbers, ‘i’ for lowercase Roman numerals, and ‘I’ for uppercase Roman numerals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tag_prefix&lt;/strong&gt; = String that should appear before the tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tag_suffix&lt;/strong&gt; = String that should appear after the tag.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt +
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(tag_levels = &amp;quot;I&amp;quot;, tag_prefix = &amp;quot;Plot &amp;quot;, tag_suffix = &amp;quot; :&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modifying-the-result-of-the-patchwork&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modifying the result of the patchwork&lt;/h1&gt;
&lt;p&gt;The resulting object of the patchwork is a ggplot object. Which means if you continue adding objects such as geoms, scales, etc. it will be referenced to the last added plot. For example, let’s italicize the x-axis text and set the angle to 45.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt +
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(tag_levels = &amp;quot;I&amp;quot;, tag_prefix = &amp;quot;Plot &amp;quot;, tag_suffix = &amp;quot; :&amp;quot;) +
  theme(axis.text.x = element_text(angle = -45, face = &amp;#39;italic&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Often when it comes to modifying the plot it is more reasonable to modify everything at once. To do so, instead of the &lt;code&gt;+&lt;/code&gt; operator, the &lt;code&gt;&amp;amp;&lt;/code&gt; operator can be used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt +
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(tag_levels = &amp;quot;I&amp;quot;, tag_prefix = &amp;quot;Plot &amp;quot;, tag_suffix = &amp;quot; :&amp;quot;) &amp;amp;
  theme(axis.text.x = element_text(angle = -45, face = &amp;#39;italic&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: geom_histogram &amp; facet_wrap with different vertical lines on each facet</title>
      <link>/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/</guid>
      <description>


&lt;p&gt;The &lt;code&gt;geom_histogram()&lt;/code&gt; function from &lt;strong&gt;ggplot2&lt;/strong&gt; package is used to create a histogram plot. For example, let’s plot the distribution of &lt;code&gt;Sepal.Length&lt;/code&gt; from &lt;strong&gt;iris&lt;/strong&gt; data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
theme_set(theme_bw())
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To add a vertical line to show the mean value of &lt;code&gt;Sepal.Length&lt;/code&gt;, we can use &lt;code&gt;geom_vline()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;) +
  geom_vline(data = iris, aes(xintercept = mean(Sepal.Length)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One of the most powerful aspects of &lt;strong&gt;ggplot2&lt;/strong&gt; is the ease with which you can create multiple sub-plots using &lt;code&gt;facet_wrap()&lt;/code&gt;. For example, let’s plot the distribution of &lt;code&gt;Sepal.Length&lt;/code&gt; by each group of &lt;code&gt;Species&lt;/code&gt; from &lt;strong&gt;iris&lt;/strong&gt; data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;) +
  facet_wrap(~Species) +
  geom_vline(data = iris, aes(xintercept = mean(Sepal.Length)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;While using &lt;code&gt;facet_wrap()&lt;/code&gt; each plot shows a different subset of the data, however, the &lt;code&gt;geom_vline()&lt;/code&gt; adds the vertical line on the same x-intercept in all plots. For instance, in the above histograms the vertical line shows the overall mean of &lt;code&gt;Sepal.Length&lt;/code&gt; column instead of mean of each group.&lt;/p&gt;
&lt;p&gt;It’s more practical to add a vertical line on each facet showing the mean for each group of data. To do so, a separate data frame containing the mean of each group should be created to use with &lt;code&gt;geom_vline()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
vline &amp;lt;- summarise(group_by(iris,Species), mean = mean(Sepal.Length))
vline&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   Species     mean
##   &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 setosa      5.01
## 2 versicolor  5.94
## 3 virginica   6.59&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;) +
  facet_wrap(~Species) +
  geom_vline(data = vline, aes(xintercept = mean))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Relationship Between Variables | scatter-plot</title>
      <link>/post/exploring-relationship-between-variables-scatter-plot/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      <guid>/post/exploring-relationship-between-variables-scatter-plot/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#when-to-use-scatterplot&#34;&gt;When to use scatterplot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scatterplot-using-the-base-r-functions&#34;&gt;Scatterplot using the base R functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scatterplot-using-ggplot2-package&#34;&gt;Scatterplot using ggplot2 package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;when-to-use-scatterplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;When to use scatterplot?&lt;/h3&gt;
&lt;p&gt;When dealing with numerical data, the most common way to graphically explore the patterns and relationships between variables and draw a conclusion about how variables correlate to one another is by plotting the data points using a scatterplot. A scatterplot uses dots/markers to represent values for two numeric variables where the position of each dot indicates values for an individual data point in the (x,y) coordinates.&lt;/p&gt;
&lt;p&gt;Scatterplots are used primarily to determine the &lt;strong&gt;strength&lt;/strong&gt; and &lt;strong&gt;direction&lt;/strong&gt; of the relationship between two numeric variables.&lt;/p&gt;
&lt;p&gt;The direction of the relationship is determined by how &lt;code&gt;y&lt;/code&gt; variable changes by an increase in &lt;code&gt;x&lt;/code&gt; variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the &lt;code&gt;y&lt;/code&gt; variable tends to increase by increasing the &lt;code&gt;x&lt;/code&gt; variable, it shows the positive relationship between two variables.&lt;/li&gt;
&lt;li&gt;When the &lt;code&gt;y&lt;/code&gt; variable tends to decrease by increasing the &lt;code&gt;x&lt;/code&gt; variable, it shows the negative relationship between two variables.&lt;/li&gt;
&lt;li&gt;If it is impossible to establish either of the above criteria, there is not any meaningful relationship between the variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The strength of the relationship is determined by how spread the data points are in the (x,y) coordinates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the data points lie exactly along a straight line, it shows the perfect relationship.&lt;/li&gt;
&lt;li&gt;When the data points are closed to one another and are concentrated near the straight line, it shows a strong relationship.&lt;/li&gt;
&lt;li&gt;If the data points appeared randomly scattered or equally distributed across the plot, it shows no relationship or a weak relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/ExploringRelationshipBetweenVariablesscatterplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scatterplot-using-the-base-r-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatterplot using the base R functions&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;plot(x,y)&lt;/code&gt; function is used to create a scatterplot where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are columns to be plotted in the x-axis and y-axis, respectively. Each point’s horizontal position indicates the value of &lt;code&gt;x&lt;/code&gt; (column that is plotted in the x-axis) and the vertical position of each point indicates the value of &lt;code&gt;y&lt;/code&gt; (column that is plotted in the y-axis).&lt;/p&gt;
&lt;p&gt;For example, you collect data from 30 individuals about their education level, age, and salary as well as the gender of each individual as below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(
  gender = c(&amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;),
  age =       c(30,    25,    27,    28,    24,    29,    27,    24,    22,    NA,    NA,    21,    25,    27,    29,    24,    22,    18,    NA,    25,    22,    23,    27,    NA,    18,    23,    19,    26,    23, 22),
  salary =    c(25000, 31000, 35000, 27000, 32000, 26000, 31000, 30000, 35000, 38000, 37000, 36000, 33000, 30000, 25000, 29000, 37000, 28000, 38000, 31000, 37000, 34000, 31000, 38000, 38000, 35000, 37000, 29000, 37000, 36000),
  education = c(9,     12,    16,    10,    14,    10,    11,    14,    16,    18,    18,    NA,    14,    12,    9,     13,    15,    10,    18,    12,    17,    16,    13,    18,    NA,    16,    NA,    12,    18, 17)
)

df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    gender age salary education
## 1    Male  30  25000         9
## 2    Male  25  31000        12
## 3    Male  27  35000        16
## 4    Male  28  27000        10
## 5    Male  24  32000        14
## 6    Male  29  26000        10
## 7    Male  27  31000        11
## 8    Male  24  30000        14
## 9    Male  22  35000        16
## 10 Female  NA  38000        18
## 11 Female  NA  37000        18
## 12 Female  21  36000        NA
## 13 Female  25  33000        14
## 14 Female  27  30000        12
## 15 Female  29  25000         9
## 16 Female  24  29000        13
## 17 Female  22  37000        15
## 18 Female  18  28000        10
## 19 Female  NA  38000        18
## 20 Female  25  31000        12
## 21   Male  22  37000        17
## 22   Male  23  34000        16
## 23   Male  27  31000        13
## 24   Male  NA  38000        18
## 25 Female  18  38000        NA
## 26 Female  23  35000        16
## 27 Female  19  37000        NA
## 28 Female  26  29000        12
## 29 Female  23  37000        18
## 30   Male  22  36000        17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By plotting the data points we can explore the relationship between age, education, and salary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot Age against Salary
plot(df$age, df$salary, main = &amp;#39;Age vs. Salary&amp;#39;)

# plot Education against Salary
plot(df$education, df$salary, main = &amp;#39;Education vs. Salary&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The plot shown above reveals that those who are younger tend to have a higher salary. Moreover, a higher education level can predict a higher salary as well.&lt;/p&gt;
&lt;p&gt;Let’s plot age against education to explore the relationship between the two variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(df$age, df$education, main = &amp;quot;Age vs. Education&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to explore the relationship between age, salary, and education in one plot by creating a scatterplot matrix using &lt;code&gt;pairs()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pairs(~salary+education+age, data = df, main = &amp;quot;Scatterplot Matrix&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The above plot confirms the same findings. It shows a positive correlation between education and salary, however, there is a negative correlation between age and salary. Furthermore, those who are younger tend to have a higher education level.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scatterplot-using-ggplot2-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatterplot using ggplot2 package&lt;/h3&gt;
&lt;p&gt;As I mentioned in the previous posts, it is preferred to use the ggplot2 packages for visualization because the resulting plot is easy to modify and it is more popular among R users to use the ggplot2 package. The &lt;code&gt;geom_point()&lt;/code&gt; function can be used from &lt;strong&gt;ggplot2&lt;/strong&gt; package to create scatterplots. For example, let’s plot age against salary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

ggplot(df, aes(x = age, y = salary)) +
  geom_point() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The common issue with scatterplot is when we have lots of data, the points will overlap (known as overplotting). There are several ways to alleviate this issue. The most common way is to use &lt;code&gt;geom_jitter()&lt;/code&gt; instead of &lt;code&gt;geom_point()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;geom_jitter()&lt;/code&gt; adds a small amount of random noise to the location of each point to make the plot easier to read. For example, compare the below plot to the one above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary)) +
  geom_jitter() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Scatterplots are very useful in identifying the relationship between two numerical variables among several groups as well by adding a third variable. When the third variable is categorical data, the most common way is by giving the dots a distinct hue to show the membership of each point to a respective group. For instance, let’s plot the relationship between age and salary among males and females.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary, color = gender)) +
  geom_jitter() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary, by Gender&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To depict the third variable that has numeric values, the common way is to change the dots’ size based on the values of the third variable, where larger points indicate higher values and smaller points indicate lower values. Moreover, hue can also be used when the third variable has numeric values by using a sequence of colors rather than using distinct colors for points like in the categorical case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary, size = education)) +
  geom_jitter() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary, color = education)) +
  geom_jitter() +
  scale_fill_gradient(low = &amp;quot;orange&amp;quot;, high = &amp;quot;red&amp;quot;, na.value = &amp;quot;grey50&amp;quot;, aesthetics = &amp;quot;color&amp;quot;) +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Also, adding another dimension to create a 3D scatterplot can be used to depict the third variable that has numeric values as another alternative rather than changing the dots’ size. Since the ggplot2 package does not produce plots with three dimensions, I use the plotly package as an example here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plotly)
plot_ly(df, x = ~age, y = ~salary, z = ~education, type = &amp;quot;scatter3d&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;visdat&#34;:{&#34;de1a7254039c&#34;:[&#34;function () &#34;,&#34;plotlyVisDat&#34;]},&#34;cur_data&#34;:&#34;de1a7254039c&#34;,&#34;attrs&#34;:{&#34;de1a7254039c&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;z&#34;:{},&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;type&#34;:&#34;scatter3d&#34;}},&#34;layout&#34;:{&#34;margin&#34;:{&#34;b&#34;:40,&#34;l&#34;:60,&#34;t&#34;:25,&#34;r&#34;:10},&#34;scene&#34;:{&#34;xaxis&#34;:{&#34;title&#34;:&#34;age&#34;},&#34;yaxis&#34;:{&#34;title&#34;:&#34;salary&#34;},&#34;zaxis&#34;:{&#34;title&#34;:&#34;education&#34;}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;showlegend&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;config&#34;:{&#34;showSendToCloud&#34;:false},&#34;data&#34;:[{&#34;x&#34;:[30,25,27,28,24,29,27,24,22,25,27,29,24,22,18,25,22,23,27,23,26,23,22],&#34;y&#34;:[25000,31000,35000,27000,32000,26000,31000,30000,35000,33000,30000,25000,29000,37000,28000,31000,37000,34000,31000,35000,29000,37000,36000],&#34;z&#34;:[9,12,16,10,14,10,11,14,16,14,12,9,13,15,10,12,17,16,13,16,12,18,17],&#34;type&#34;:&#34;scatter3d&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;}},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;},&#34;frame&#34;:null}],&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
