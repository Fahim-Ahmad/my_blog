[{"authors":null,"categories":null,"content":"I am an aspiring data analyst and experienced researcher with a Master of Arts in Economics. Apart from my formal education, I have been self-learning and teaching topics in statistics and research methods. I have several publications in the form of text-books on Research Method; Applied Statistics for Policy Analysis; and Data Management, Analysis, and Visualization that are freely available to anyone who is interested in this field.\nI started this blog to share data anlaysis tips and tricks using R and Pythong.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/fahim-ahmad/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/fahim-ahmad/","section":"authors","summary":"I am an aspiring data analyst and experienced researcher with a Master of Arts in Economics. Apart from my formal education, I have been self-learning and teaching topics in statistics and research methods.","tags":null,"title":"Fahim Ahmad","type":"authors"},{"authors":null,"categories":["R"],"content":" In R working with survey weight is made possible using survey package. Let’s use below data frame as an exmaple here:\nset.seed(1000) age \u0026lt;- c(18:100) age \u0026lt;- sample(age, 100, replace = TRUE) gender \u0026lt;- c(\u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;) gender \u0026lt;- sample(gender, 100, replace = TRUE) country \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;) country \u0026lt;- sample(country, 100, replace = TRUE) df \u0026lt;- data.frame(age, gender, country) df$weight[df$gender==\u0026quot;Female\u0026quot;] \u0026lt;-50/sum(df$gender==\u0026quot;Female\u0026quot;) df$weight[df$gender==\u0026quot;Male\u0026quot;] \u0026lt;-50/sum(df$gender==\u0026quot;Male\u0026quot;) # summary of data summary(df) ## age gender country weight ## Min. :18.00 Length:100 Length:100 Min. :0.8929 ## 1st Qu.:38.75 Class :character Class :character 1st Qu.:0.8929 ## Median :54.50 Mode :character Mode :character Median :0.8929 ## Mean :55.79 Mean :1.0000 ## 3rd Qu.:73.25 3rd Qu.:1.1364 ## Max. :97.00 Max. :1.1364 The most important variable here is the weight variable which is constructed to balance the sex ratio.\nInside the survey package, there is svydesign() function that can be used to link a data frame with a weight.\n# install.packages(\u0026quot;survey\u0026quot;) library(survey) df.w \u0026lt;- svydesign(ids = ~1, data = df, weights = ~weight) The resulting object is not a data frame anymore, but is a list of different objects that can be seen using attributes() function.\nattributes(df.w) ## $names ## [1] \u0026quot;cluster\u0026quot; \u0026quot;strata\u0026quot; \u0026quot;has.strata\u0026quot; \u0026quot;prob\u0026quot; \u0026quot;allprob\u0026quot; ## [6] \u0026quot;call\u0026quot; \u0026quot;variables\u0026quot; \u0026quot;fpc\u0026quot; \u0026quot;pps\u0026quot; ## ## $class ## [1] \u0026quot;survey.design2\u0026quot; \u0026quot;survey.design\u0026quot; Therefore, we need to use survey’s own analytical functions. For example, here is a comparison of unweighted and weighted sex ratio.\n# unweighted df %\u0026gt;% {table(.$gender)} %\u0026gt;% prop.table() ## ## Female Male ## 0.44 0.56 # weighted df.w %\u0026gt;% svytable(~gender, .) %\u0026gt;% prop.table() ## gender ## Female Male ## 0.5 0.5 svytable() can be used to create more than one-way frequency/percentage tables as well. For example, let’s create contingency table of gender and country\ndf.w %\u0026gt;% svytable(~gender+country, .) %\u0026gt;% prop.table(2) ## country ## gender A B ## Female 0.5600000 0.4329897 ## Male 0.4400000 0.5670103 Below are other useful functions of survey package:\n# to compute weighted mean svymean(~age, df.w) # to compute weighted quantiles svyquantile(~age, df.w, c(.25, .50, .75)) # to compute weigted variance svyvar(~age, df.w) # to perform t-test svyttest(age~gender, df.w) ","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486400,"objectID":"139270799ab66c89449eeb892bb332fd","permalink":"/post/using-survey-weight-in-r/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/post/using-survey-weight-in-r/","section":"post","summary":"In R working with survey weight is made possible using survey package. Let’s use below data frame as an exmaple here:\nset.seed(1000) age \u0026lt;- c(18:100) age \u0026lt;- sample(age, 100, replace = TRUE) gender \u0026lt;- c(\u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;) gender \u0026lt;- sample(gender, 100, replace = TRUE) country \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;) country \u0026lt;- sample(country, 100, replace = TRUE) df \u0026lt;- data.","tags":["R"],"title":"Using Survey Weight","type":"post"},{"authors":null,"categories":["R"],"content":"  Introduction loading required packages creating example plots  Combining plots using the patchwork package Combining plots beside or on top of each other Controlling the legend Adding an empty area Combining plot and table Annotation Modifying the result of the patchwork   Introduction Data is just a collection of numbers until it is turned into a story. Sometimes, the combination of several plots is required for telling a great data-driven story.\nIt is a while that I am using R for data analysis and visualization and I have been using several packages for combining multiple plots. During this period, I found the patchwork package the most straightforward way of combining multiple ggplot plots which I will explore it in this post.\nloading required packages # install.packages(\u0026quot;patchwork\u0026quot;) library(patchwork) # install.packages(\u0026quot;gapminder\u0026quot;) library(gapminder) # install.packages(\u0026quot;dplyr\u0026quot;) library(dplyr) # install.packages() library(ggplot2)  creating example plots gdpPercap_lifeExpt \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=gdpPercap, y=lifeExp, col = continent)) + geom_point() + theme_bw() + labs(x = NULL, y = NULL) lifeExpt_densityPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=lifeExp, fill=continent)) + geom_density(alpha=0.4) + theme_bw() + labs(x = NULL, y = NULL) lifeExpt_boxPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=continent, y=lifeExp, col=continent)) + geom_boxplot() + geom_jitter(width=0.2, alpha=0.4) + theme_bw() + labs(x = NULL, y = NULL) gdpPercap_densityPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x = gdpPercap, fill = continent)) + geom_density(alpha = 0.4) + theme_bw() + labs(x = NULL, y = NULL) gdpPercap_boxPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=continent, y=gdpPercap, col=continent)) + geom_boxplot() + geom_jitter(width=0.2, alpha=0.4) + theme_bw() + labs(x = NULL, y = NULL)   Combining plots using the patchwork package Them most simple and straightforward way to combine plots is to use the + operator.\nlifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot  Combining plots beside or on top of each other The + operator combines plots without indicating anything about the desired layout. By default, the patchwork package keeps the grid square and fill the grid in row order. This can be controlled by plot_layout().\nlifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot + plot_layout(nrow = 3, byrow = F)  By having a one-row layout plot_layout(nrow = 1) or one-column layout plotlayout(ncol = 1), plots can be placed on top of each other or beside each other.\n Likewise, patchwork provides two more operators. | and /\n| will place the plots beside each other, while / will stack them.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt  Controlling the legend The plotlayout() function can also be used to place the legends in a common place instead of next to each plot.\nlifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot + plot_layout(nrow = 3, byrow = F, guides = \u0026#39;collect\u0026#39;) gdpPercap_lifeExpt / ((lifeExpt_densityPlot / lifeExpt_boxPlot) | (gdpPercap_densityPlot / gdpPercap_boxPlot)) + plot_layout(guides = \u0026#39;collect\u0026#39;)  Adding an empty area It is also possible to add an empty area between the plots by creating an empty ggplot object using the plot_spacer() and adding it to the patchwork.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / plot_spacer() / gdpPercap_lifeExpt  Combining plot and table Sometimes you may want to combine a non-ggplot content with a ggplot plot. For instance, let’s combine the correlation table between life expectancy, GDP per capita, and population with the GDP per capita and life expectancy scatter plot.\n# install.packages(\u0026quot;gridExtra\u0026quot;) library(gridExtra) correlation \u0026lt;- cor(gapminder[,c(4:6)], method = \u0026#39;pearson\u0026#39;) %\u0026gt;% round(digits = 3) gdpPercap_lifeExpt / tableGrob(correlation)  Annotation The plot_annotation() function can be used to control different aspects of the annotation of the final plot such as title, subtitle, and caption.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(title = \u0026#39;THIS IS TITLE\u0026#39;, subtitle = \u0026#39;this is subtitle\u0026#39;) The plot_annotation() function also provide the tag_levels, tag_prefix, and tag_suffix arguments for auto-tagging to identify the subplots in text.\n tag_levels = A character vector defining the enumeration format to use at each level. Possible values are ‘a’ for lowercase letters, ‘A’ for uppercase letters, ‘1’ for numbers, ‘i’ for lowercase Roman numerals, and ‘I’ for uppercase Roman numerals.\n tag_prefix = String that should appear before the tag.\n tag_suffix = String that should appear after the tag.\n  (lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(tag_levels = \u0026quot;I\u0026quot;, tag_prefix = \u0026quot;Plot \u0026quot;, tag_suffix = \u0026quot; :\u0026quot;)  Modifying the result of the patchwork The resulting object of the patchwork is a ggplot object. Which means if you continue adding objects such as geoms, scales, etc. it will be referenced to the last added plot. For example, let’s italicize the x-axis text and set the angle to 45.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(tag_levels = \u0026quot;I\u0026quot;, tag_prefix = \u0026quot;Plot \u0026quot;, tag_suffix = \u0026quot; :\u0026quot;) + theme(axis.text.x = element_text(angle = -45, face = \u0026#39;italic\u0026#39;)) Often when it comes to modifying the plot it is more reasonable to modify everything at once. To do so, instead of the + operator, the \u0026amp; operator can be used.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(tag_levels = \u0026quot;I\u0026quot;, tag_prefix = \u0026quot;Plot \u0026quot;, tag_suffix = \u0026quot; :\u0026quot;) \u0026amp; theme(axis.text.x = element_text(angle = -45, face = \u0026#39;italic\u0026#39;))  ","date":1649635200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649635200,"objectID":"ddba152c703054d361462071b25c9a19","permalink":"/post/combining-multiple-plots-using-patchwork/","publishdate":"2022-04-11T00:00:00Z","relpermalink":"/post/combining-multiple-plots-using-patchwork/","section":"post","summary":"Introduction loading required packages creating example plots  Combining plots using the patchwork package Combining plots beside or on top of each other Controlling the legend Adding an empty area Combining plot and table Annotation Modifying the result of the patchwork   Introduction Data is just a collection of numbers until it is turned into a story.","tags":["ggplot","patchwork"],"title":"Combining Multiple Plots using Patchwork","type":"post"},{"authors":null,"categories":["R"],"content":" The geom_histogram() function from ggplot2 package is used to create a histogram plot. For example, let’s plot the distribution of Sepal.Length from iris data.\nlibrary(ggplot2) theme_set(theme_bw()) ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) To add a vertical line to show the mean value of Sepal.Length, we can use geom_vline().\nlibrary(ggplot2) ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) + geom_vline(data = iris, aes(xintercept = mean(Sepal.Length))) One of the most powerful aspects of ggplot2 is the ease with which you can create multiple sub-plots using facet_wrap(). For example, let’s plot the distribution of Sepal.Length by each group of Species from iris data.\nggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) + facet_wrap(~Species) + geom_vline(data = iris, aes(xintercept = mean(Sepal.Length))) While using facet_wrap() each plot shows a different subset of the data, however, the geom_vline() adds the vertical line on the same x-intercept in all plots. For instance, in the above histograms the vertical line shows the overall mean of Sepal.Length column instead of mean of each group.\nIt’s more practical to add a vertical line on each facet showing the mean for each group of data. To do so, a separate data frame containing the mean of each group should be created to use with geom_vline().\nlibrary(dplyr) vline \u0026lt;- summarise(group_by(iris,Species), mean = mean(Sepal.Length)) vline ## # A tibble: 3 × 2 ## Species mean ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 setosa 5.01 ## 2 versicolor 5.94 ## 3 virginica 6.59 ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) + facet_wrap(~Species) + geom_vline(data = vline, aes(xintercept = mean)) ","date":1648944000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648944000,"objectID":"d661aa539482913fd5ff40d6c95c6fa4","permalink":"/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/","publishdate":"2022-04-03T00:00:00Z","relpermalink":"/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/","section":"post","summary":"The geom_histogram() function from ggplot2 package is used to create a histogram plot. For example, let’s plot the distribution of Sepal.Length from iris data.\nlibrary(ggplot2) theme_set(theme_bw()) ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) To add a vertical line to show the mean value of Sepal.","tags":["ggplot","visualization"],"title":"ggplot2: geom_histogram \u0026 facet_wrap with different vertical lines on each facet","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]