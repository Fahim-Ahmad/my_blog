[{"authors":null,"categories":null,"content":"I am an aspiring data analyst and experienced researcher with a Master of Arts in Economics. Apart from my formal education, I have been self-learning and teaching topics in statistics and research methods. I have several publications in the form of textbooks on Research Method; Applied Statistics for Policy Analysis; and Data Management, Analysis, and Visualization that are freely available to anyone who is interested in this field.\nI started this blog to share data analysis tips and tricks using R and Python.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/fahim-ahmad/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/fahim-ahmad/","section":"authors","summary":"I am an aspiring data analyst and experienced researcher with a Master of Arts in Economics. Apart from my formal education, I have been self-learning and teaching topics in statistics and research methods.","tags":null,"title":"Fahim Ahmad","type":"authors"},{"authors":null,"categories":["R"],"content":" In R working with survey weight is made possible using survey package. Let’s use below data frame as an exmaple here:\nset.seed(1000) age \u0026lt;- c(18:100) age \u0026lt;- sample(age, 100, replace = TRUE) gender \u0026lt;- c(\u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;) gender \u0026lt;- sample(gender, 100, replace = TRUE) country \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;) country \u0026lt;- sample(country, 100, replace = TRUE) df \u0026lt;- data.frame(age, gender, country) df$weight[df$gender==\u0026quot;Female\u0026quot;] \u0026lt;-50/sum(df$gender==\u0026quot;Female\u0026quot;) df$weight[df$gender==\u0026quot;Male\u0026quot;] \u0026lt;-50/sum(df$gender==\u0026quot;Male\u0026quot;) # summary of data summary(df) ## age gender country weight ## Min. :18.00 Length:100 Length:100 Min. :0.8929 ## 1st Qu.:38.75 Class :character Class :character 1st Qu.:0.8929 ## Median :54.50 Mode :character Mode :character Median :0.8929 ## Mean :55.79 Mean :1.0000 ## 3rd Qu.:73.25 3rd Qu.:1.1364 ## Max. :97.00 Max. :1.1364 The most important variable here is the weight variable which is constructed to balance the sex ratio.\nInside the survey package, there is svydesign() function that can be used to link a data frame with a weight.\n# install.packages(\u0026quot;survey\u0026quot;) library(survey) df.w \u0026lt;- svydesign(ids = ~1, data = df, weights = ~weight) The resulting object is not a data frame anymore, but is a list of different objects that can be seen using attributes() function.\nattributes(df.w) ## $names ## [1] \u0026quot;cluster\u0026quot; \u0026quot;strata\u0026quot; \u0026quot;has.strata\u0026quot; \u0026quot;prob\u0026quot; \u0026quot;allprob\u0026quot; ## [6] \u0026quot;call\u0026quot; \u0026quot;variables\u0026quot; \u0026quot;fpc\u0026quot; \u0026quot;pps\u0026quot; ## ## $class ## [1] \u0026quot;survey.design2\u0026quot; \u0026quot;survey.design\u0026quot; Therefore, we need to use survey’s own analytical functions. For example, here is a comparison of unweighted and weighted sex ratio.\n# unweighted df %\u0026gt;% {table(.$gender)} %\u0026gt;% prop.table() ## ## Female Male ## 0.44 0.56 # weighted df.w %\u0026gt;% svytable(~gender, .) %\u0026gt;% prop.table() ## gender ## Female Male ## 0.5 0.5 svytable() can be used to create more than one-way frequency/percentage tables as well. For example, let’s create contingency table of gender and country\ndf.w %\u0026gt;% svytable(~gender+country, .) %\u0026gt;% prop.table(2) ## country ## gender A B ## Female 0.5600000 0.4329897 ## Male 0.4400000 0.5670103 Below are other useful functions of survey package:\n# to compute weighted mean svymean(~age, df.w) # to compute weighted quantiles svyquantile(~age, df.w, c(.25, .50, .75)) # to compute weigted variance svyvar(~age, df.w) # to perform t-test svyttest(age~gender, df.w) ","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486400,"objectID":"139270799ab66c89449eeb892bb332fd","permalink":"/post/using-survey-weight-in-r/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/post/using-survey-weight-in-r/","section":"post","summary":"In R working with survey weight is made possible using survey package. Let’s use below data frame as an exmaple here:\nset.seed(1000) age \u0026lt;- c(18:100) age \u0026lt;- sample(age, 100, replace = TRUE) gender \u0026lt;- c(\u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;) gender \u0026lt;- sample(gender, 100, replace = TRUE) country \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;) country \u0026lt;- sample(country, 100, replace = TRUE) df \u0026lt;- data.","tags":["R"],"title":"Using Survey Weight","type":"post"},{"authors":null,"categories":["R"],"content":"  Introduction loading required packages creating example plots  Combining plots using the patchwork package Combining plots beside or on top of each other Controlling the legend Adding an empty area Combining plot and table Annotation Modifying the result of the patchwork   Introduction Data is just a collection of numbers until it is turned into a story. Sometimes, the combination of several plots is required for telling a great data-driven story.\nIt is a while that I am using R for data analysis and visualization and I have been using several packages for combining multiple plots. During this period, I found the patchwork package the most straightforward way of combining multiple ggplot plots which I will explore it in this post.\nloading required packages # install.packages(\u0026quot;patchwork\u0026quot;) library(patchwork) # install.packages(\u0026quot;gapminder\u0026quot;) library(gapminder) # install.packages(\u0026quot;dplyr\u0026quot;) library(dplyr) # install.packages() library(ggplot2)  creating example plots gdpPercap_lifeExpt \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=gdpPercap, y=lifeExp, col = continent)) + geom_point() + theme_bw() + labs(x = NULL, y = NULL) lifeExpt_densityPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=lifeExp, fill=continent)) + geom_density(alpha=0.4) + theme_bw() + labs(x = NULL, y = NULL) lifeExpt_boxPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=continent, y=lifeExp, col=continent)) + geom_boxplot() + geom_jitter(width=0.2, alpha=0.4) + theme_bw() + labs(x = NULL, y = NULL) gdpPercap_densityPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x = gdpPercap, fill = continent)) + geom_density(alpha = 0.4) + theme_bw() + labs(x = NULL, y = NULL) gdpPercap_boxPlot \u0026lt;- gapminder %\u0026gt;% ggplot(aes(x=continent, y=gdpPercap, col=continent)) + geom_boxplot() + geom_jitter(width=0.2, alpha=0.4) + theme_bw() + labs(x = NULL, y = NULL)   Combining plots using the patchwork package Them most simple and straightforward way to combine plots is to use the + operator.\nlifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot  Combining plots beside or on top of each other The + operator combines plots without indicating anything about the desired layout. By default, the patchwork package keeps the grid square and fill the grid in row order. This can be controlled by plot_layout().\nlifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot + plot_layout(nrow = 3, byrow = F)  By having a one-row layout plot_layout(nrow = 1) or one-column layout plotlayout(ncol = 1), plots can be placed on top of each other or beside each other.\n Likewise, patchwork provides two more operators. | and /\n| will place the plots beside each other, while / will stack them.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt  Controlling the legend The plotlayout() function can also be used to place the legends in a common place instead of next to each plot.\nlifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot + plot_layout(nrow = 3, byrow = F, guides = \u0026#39;collect\u0026#39;) gdpPercap_lifeExpt / ((lifeExpt_densityPlot / lifeExpt_boxPlot) | (gdpPercap_densityPlot / gdpPercap_boxPlot)) + plot_layout(guides = \u0026#39;collect\u0026#39;)  Adding an empty area It is also possible to add an empty area between the plots by creating an empty ggplot object using the plot_spacer() and adding it to the patchwork.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / plot_spacer() / gdpPercap_lifeExpt  Combining plot and table Sometimes you may want to combine a non-ggplot content with a ggplot plot. For instance, let’s combine the correlation table between life expectancy, GDP per capita, and population with the GDP per capita and life expectancy scatter plot.\n# install.packages(\u0026quot;gridExtra\u0026quot;) library(gridExtra) correlation \u0026lt;- cor(gapminder[,c(4:6)], method = \u0026#39;pearson\u0026#39;) %\u0026gt;% round(digits = 3) gdpPercap_lifeExpt / tableGrob(correlation)  Annotation The plot_annotation() function can be used to control different aspects of the annotation of the final plot such as title, subtitle, and caption.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(title = \u0026#39;THIS IS TITLE\u0026#39;, subtitle = \u0026#39;this is subtitle\u0026#39;) The plot_annotation() function also provide the tag_levels, tag_prefix, and tag_suffix arguments for auto-tagging to identify the subplots in text.\n tag_levels = A character vector defining the enumeration format to use at each level. Possible values are ‘a’ for lowercase letters, ‘A’ for uppercase letters, ‘1’ for numbers, ‘i’ for lowercase Roman numerals, and ‘I’ for uppercase Roman numerals.\n tag_prefix = String that should appear before the tag.\n tag_suffix = String that should appear after the tag.\n  (lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(tag_levels = \u0026quot;I\u0026quot;, tag_prefix = \u0026quot;Plot \u0026quot;, tag_suffix = \u0026quot; :\u0026quot;)  Modifying the result of the patchwork The resulting object of the patchwork is a ggplot object. Which means if you continue adding objects such as geoms, scales, etc. it will be referenced to the last added plot. For example, let’s italicize the x-axis text and set the angle to 45.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(tag_levels = \u0026quot;I\u0026quot;, tag_prefix = \u0026quot;Plot \u0026quot;, tag_suffix = \u0026quot; :\u0026quot;) + theme(axis.text.x = element_text(angle = -45, face = \u0026#39;italic\u0026#39;)) Often when it comes to modifying the plot it is more reasonable to modify everything at once. To do so, instead of the + operator, the \u0026amp; operator can be used.\n(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + plot_layout(guides = \u0026#39;collect\u0026#39;) + plot_annotation(tag_levels = \u0026quot;I\u0026quot;, tag_prefix = \u0026quot;Plot \u0026quot;, tag_suffix = \u0026quot; :\u0026quot;) \u0026amp; theme(axis.text.x = element_text(angle = -45, face = \u0026#39;italic\u0026#39;))  ","date":1649635200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649635200,"objectID":"ddba152c703054d361462071b25c9a19","permalink":"/post/combining-multiple-plots-using-patchwork/","publishdate":"2022-04-11T00:00:00Z","relpermalink":"/post/combining-multiple-plots-using-patchwork/","section":"post","summary":"Introduction loading required packages creating example plots  Combining plots using the patchwork package Combining plots beside or on top of each other Controlling the legend Adding an empty area Combining plot and table Annotation Modifying the result of the patchwork   Introduction Data is just a collection of numbers until it is turned into a story.","tags":["ggplot","patchwork"],"title":"Combining Multiple Plots using Patchwork","type":"post"},{"authors":null,"categories":["R"],"content":" The geom_histogram() function from ggplot2 package is used to create a histogram plot. For example, let’s plot the distribution of Sepal.Length from iris data.\nlibrary(ggplot2) theme_set(theme_bw()) ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) To add a vertical line to show the mean value of Sepal.Length, we can use geom_vline().\nlibrary(ggplot2) ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) + geom_vline(data = iris, aes(xintercept = mean(Sepal.Length))) One of the most powerful aspects of ggplot2 is the ease with which you can create multiple sub-plots using facet_wrap(). For example, let’s plot the distribution of Sepal.Length by each group of Species from iris data.\nggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) + facet_wrap(~Species) + geom_vline(data = iris, aes(xintercept = mean(Sepal.Length))) While using facet_wrap() each plot shows a different subset of the data, however, the geom_vline() adds the vertical line on the same x-intercept in all plots. For instance, in the above histograms the vertical line shows the overall mean of Sepal.Length column instead of mean of each group.\nIt’s more practical to add a vertical line on each facet showing the mean for each group of data. To do so, a separate data frame containing the mean of each group should be created to use with geom_vline().\nlibrary(dplyr) vline \u0026lt;- summarise(group_by(iris,Species), mean = mean(Sepal.Length)) vline ## # A tibble: 3 × 2 ## Species mean ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 setosa 5.01 ## 2 versicolor 5.94 ## 3 virginica 6.59 ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) + facet_wrap(~Species) + geom_vline(data = vline, aes(xintercept = mean)) ","date":1648944000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648944000,"objectID":"d661aa539482913fd5ff40d6c95c6fa4","permalink":"/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/","publishdate":"2022-04-03T00:00:00Z","relpermalink":"/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/","section":"post","summary":"The geom_histogram() function from ggplot2 package is used to create a histogram plot. For example, let’s plot the distribution of Sepal.Length from iris data.\nlibrary(ggplot2) theme_set(theme_bw()) ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = \u0026quot;orange\u0026quot;) To add a vertical line to show the mean value of Sepal.","tags":["ggplot","visualization"],"title":"ggplot2: geom_histogram \u0026 facet_wrap with different vertical lines on each facet","type":"post"},{"authors":null,"categories":["R"],"content":"        When to use scatterplot? Scatterplot using the base R functions Scatterplot using ggplot2 package   When to use scatterplot? When dealing with numerical data, the most common way to graphically explore the patterns and relationships between variables and draw a conclusion about how variables correlate to one another is by plotting the data points using a scatterplot. A scatterplot uses dots/markers to represent values for two numeric variables where the position of each dot indicates values for an individual data point in the (x,y) coordinates.\nScatterplots are used primarily to determine the strength and direction of the relationship between two numeric variables.\nThe direction of the relationship is determined by how y variable changes by an increase in x variable.\n When the y variable tends to increase by increasing the x variable, it shows the positive relationship between two variables. When the y variable tends to decrease by increasing the x variable, it shows the negative relationship between two variables. If it is impossible to establish either of the above criteria, there is not any meaningful relationship between the variables.  The strength of the relationship is determined by how spread the data points are in the (x,y) coordinates.\n When the data points lie exactly along a straight line, it shows the perfect relationship. When the data points are closed to one another and are concentrated near the straight line, it shows a strong relationship. If the data points appeared randomly scattered or equally distributed across the plot, it shows no relationship or a weak relationship.  \n Scatterplot using the base R functions The plot(x,y) function is used to create a scatterplot where x and y are columns to be plotted in the x-axis and y-axis, respectively. Each point’s horizontal position indicates the value of x (column that is plotted in the x-axis) and the vertical position of each point indicates the value of y (column that is plotted in the y-axis).\nFor example, you collect data from 30 individuals about their education level, age, and salary as well as the gender of each individual as below.\ndf \u0026lt;- data.frame( gender = c(\u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Female\u0026quot;, \u0026quot;Male\u0026quot;), age = c(30, 25, 27, 28, 24, 29, 27, 24, 22, NA, NA, 21, 25, 27, 29, 24, 22, 18, NA, 25, 22, 23, 27, NA, 18, 23, 19, 26, 23, 22), salary = c(25000, 31000, 35000, 27000, 32000, 26000, 31000, 30000, 35000, 38000, 37000, 36000, 33000, 30000, 25000, 29000, 37000, 28000, 38000, 31000, 37000, 34000, 31000, 38000, 38000, 35000, 37000, 29000, 37000, 36000), education = c(9, 12, 16, 10, 14, 10, 11, 14, 16, 18, 18, NA, 14, 12, 9, 13, 15, 10, 18, 12, 17, 16, 13, 18, NA, 16, NA, 12, 18, 17) ) df ## gender age salary education ## 1 Male 30 25000 9 ## 2 Male 25 31000 12 ## 3 Male 27 35000 16 ## 4 Male 28 27000 10 ## 5 Male 24 32000 14 ## 6 Male 29 26000 10 ## 7 Male 27 31000 11 ## 8 Male 24 30000 14 ## 9 Male 22 35000 16 ## 10 Female NA 38000 18 ## 11 Female NA 37000 18 ## 12 Female 21 36000 NA ## 13 Female 25 33000 14 ## 14 Female 27 30000 12 ## 15 Female 29 25000 9 ## 16 Female 24 29000 13 ## 17 Female 22 37000 15 ## 18 Female 18 28000 10 ## 19 Female NA 38000 18 ## 20 Female 25 31000 12 ## 21 Male 22 37000 17 ## 22 Male 23 34000 16 ## 23 Male 27 31000 13 ## 24 Male NA 38000 18 ## 25 Female 18 38000 NA ## 26 Female 23 35000 16 ## 27 Female 19 37000 NA ## 28 Female 26 29000 12 ## 29 Female 23 37000 18 ## 30 Male 22 36000 17 By plotting the data points we can explore the relationship between age, education, and salary.\n# plot Age against Salary plot(df$age, df$salary, main = \u0026#39;Age vs. Salary\u0026#39;) # plot Education against Salary plot(df$education, df$salary, main = \u0026#39;Education vs. Salary\u0026#39;) The plot shown above reveals that those who are younger tend to have a higher salary. Moreover, a higher education level can predict a higher salary as well.\nLet’s plot age against education to explore the relationship between the two variables.\nplot(df$age, df$education, main = \u0026quot;Age vs. Education\u0026quot;) It is also possible to explore the relationship between age, salary, and education in one plot by creating a scatterplot matrix using pairs() function.\npairs(~salary+education+age, data = df, main = \u0026quot;Scatterplot Matrix\u0026quot;) The above plot confirms the same findings. It shows a positive correlation between education and salary, however, there is a negative correlation between age and salary. Furthermore, those who are younger tend to have a higher education level.\n Scatterplot using ggplot2 package As I mentioned in the previous posts, it is preferred to use the ggplot2 packages for visualization because the resulting plot is easy to modify and it is more popular among R users to use the ggplot2 package. The geom_point() function can be used from ggplot2 package to create scatterplots. For example, let’s plot age against salary.\nlibrary(ggplot2) ggplot(df, aes(x = age, y = salary)) + geom_point() + theme_bw() + labs(title = \u0026quot;Age vs. Salary\u0026quot;) The common issue with scatterplot is when we have lots of data, the points will overlap (known as overplotting). There are several ways to alleviate this issue. The most common way is to use geom_jitter() instead of geom_point().\nThe geom_jitter() adds a small amount of random noise to the location of each point to make the plot easier to read. For example, compare the below plot to the one above.\nggplot(df, aes(x = age, y = salary)) + geom_jitter() + theme_bw() + labs(title = \u0026quot;Age vs. Salary\u0026quot;) Scatterplots are very useful in identifying the relationship between two numerical variables among several groups as well by adding a third variable. When the third variable is categorical data, the most common way is by giving the dots a distinct hue to show the membership of each point to a respective group. For instance, let’s plot the relationship between age and salary among males and females.\nggplot(df, aes(x = age, y = salary, color = gender)) + geom_jitter() + theme_bw() + labs(title = \u0026quot;Age vs. Salary, by Gender\u0026quot;) To depict the third variable that has numeric values, the common way is to change the dots’ size based on the values of the third variable, where larger points indicate higher values and smaller points indicate lower values. Moreover, hue can also be used when the third variable has numeric values by using a sequence of colors rather than using distinct colors for points like in the categorical case.\nggplot(df, aes(x = age, y = salary, size = education)) + geom_jitter() + theme_bw() + labs(title = \u0026quot;Age vs. Salary\u0026quot;) ggplot(df, aes(x = age, y = salary, color = education)) + geom_jitter() + scale_fill_gradient(low = \u0026quot;orange\u0026quot;, high = \u0026quot;red\u0026quot;, na.value = \u0026quot;grey50\u0026quot;, aesthetics = \u0026quot;color\u0026quot;) + theme_bw() + labs(title = \u0026quot;Age vs. Salary\u0026quot;) Also, adding another dimension to create a 3D scatterplot can be used to depict the third variable that has numeric values as another alternative rather than changing the dots’ size. Since the ggplot2 package does not produce plots with three dimensions, I use the plotly package as an example here.\nlibrary(plotly) plot_ly(df, x = ~age, y = ~salary, z = ~education, type = \u0026quot;scatter3d\u0026quot;)  {\"x\":{\"visdat\":{\"de1a7254039c\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"de1a7254039c\",\"attrs\":{\"de1a7254039c\":{\"x\":{},\"y\":{},\"z\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"age\"},\"yaxis\":{\"title\":\"salary\"},\"zaxis\":{\"title\":\"education\"}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[30,25,27,28,24,29,27,24,22,25,27,29,24,22,18,25,22,23,27,23,26,23,22],\"y\":[25000,31000,35000,27000,32000,26000,31000,30000,35000,33000,30000,25000,29000,37000,28000,31000,37000,34000,31000,35000,29000,37000,36000],\"z\":[9,12,16,10,14,10,11,14,16,14,12,9,13,15,10,12,17,16,13,16,12,18,17],\"type\":\"scatter3d\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}  ","date":1628553600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628553600,"objectID":"dabf8b7176ced71e847701da8901ec38","permalink":"/post/exploring-relationship-between-variables-scatter-plot/","publishdate":"2021-08-10T00:00:00Z","relpermalink":"/post/exploring-relationship-between-variables-scatter-plot/","section":"post","summary":"When to use scatterplot? Scatterplot using the base R functions Scatterplot using ggplot2 package   When to use scatterplot? When dealing with numerical data, the most common way to graphically explore the patterns and relationships between variables and draw a conclusion about how variables correlate to one another is by plotting the data points using a scatterplot.","tags":["R","ggplot","visualization"],"title":"Exploring Relationship Between Variables | scatter-plot","type":"post"},{"authors":null,"categories":null,"content":"  body { text-align: justify}  Calculating the average of percentages is NOT similar to calculating the average of numbers.\nI am conducting data analysis trainings once every two months and at the end of each class I ask students if they want to join the advanced data analysis class that I organize once each year. Below data frame contains part of the actual data which I collected from those who have participated in my classes in the past few months which basically has three variables as following:\n class: either a trainee is from class 1 or class 2. education: highest education level of trainees advanced_class: a dummy variable where TRUE indicates a trainee is eager to participate in the advanced class and FALAE indicates a trainee doesn’t want to attend in the advanced class.  df \u0026lt;- data.frame( class = c(\u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 1\u0026quot;,\u0026quot;class 1\u0026quot;, \u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;,\u0026quot;class 1\u0026quot;, \u0026quot;class 1\u0026quot;, \u0026quot;class 1\u0026quot;,\u0026quot;class 2\u0026quot;), education = c(\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;,\u0026quot;BA\u0026quot;,\u0026quot;MA\u0026quot;), advanced_class = c(TRUE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE) ) ## class education advanced_class ## 1 class 1 BA TRUE ## 2 class 2 MA TRUE ## 3 class 1 BA FALSE ## 4 class 1 BA TRUE ## 5 class 2 MA FALSE ## 6 class 2 MA TRUE ## 7 class 1 BA TRUE ## 8 class 1 BA FALSE ## 9 class 1 BA TRUE ## 10 class 2 MA TRUE ## 11 class 1 MA FALSE ## 12 class 1 MA TRUE ## 13 class 2 BA FALSE ## 14 class 2 MA TRUE ## 15 class 2 BA FALSE ## 16 class 1 MA FALSE ## 17 class 1 BA FALSE ## 18 class 1 BA TRUE ## 19 class 1 MA TRUE ## 20 class 2 MA TRUE ## 21 class 1 BA FALSE ## 22 class 1 BA FALSE ## 23 class 1 MA FALSE ## 24 class 2 MA FALSE ## 25 class 1 BA TRUE ## 26 class 1 MA TRUE ## 27 class 1 BA FALSE ## 28 class 2 MA TRUE Let’s find the percentage of each group who are eager to participate in the advanced class.\nlibrary(dplyr) df %\u0026gt;% {round(prop.table(table(.$class, .$advanced_class),1)*100,2)} ## ## FALSE TRUE ## class 1 50 50 ## class 2 40 60 Above table shows that 60% of trainees from class 2 and 50% of trainees from class 1 want to join the advanced class. Does this mean that (60%+50%)/2=55% of all trainees are intended to join the advanced class?\nlibrary(ggplot2) theme_set(theme_bw()) round(prop.table(table(df$class, df$advanced_class),1)*100,1) %\u0026gt;% data.frame() %\u0026gt;% rename(class = Var1, advanced_class=Var2, percentage = Freq) %\u0026gt;% filter(advanced_class!=FALSE) %\u0026gt;% # mutate(average = sum(percentage)/2) %\u0026gt;% ggplot(aes(x=class, y=percentage, fill = class)) + geom_col() + geom_text(aes(label = percentage), nudge_x=0, nudge_y = 2) + geom_hline(yintercept = (50+60)/2, linetype = \u0026quot;dashed\u0026quot;, color = \u0026quot;red\u0026quot;, size = 1) The answer is No. Because each group does not represent equal numbers of trainees.\ndf %\u0026gt;% {table(.$class)} ## ## class 1 class 2 ## 18 10 As shown above, there are 18 trainees from class 1 and 10 trainees from class 2. It means that 60% of those form the second class represents only 6 trainees and 50% of those from the first class represents 9 trainees.\n class 1: (50 / 100) x 18 = 9 class 2: (60 / 100) x 10 = 6  From the above result we can say that 9+6=15 out of all 18+10=28 trainees in both classes said they would like to join the advanced class. Therefore we can say that (15/28)*100=53.57% of all trainees want to join the advanced class.\ndf %\u0026gt;% {round(prop.table(table(.$advanced_class))*100,2)} ## ## FALSE TRUE ## 46.43 53.57 It can be observed that there is an inconsistency between (6+9/28)*100 =53.57% and (60%+50%)/2=55%. Hence, the temptation of averaging percentages can lead to an inaccurate result.\nWhen sample size in both groups is equal, however, the average of percentages agrees with the accurate percentage calculation.\nFor example, the above data shows that 64.29% of trainees with a master degree would like to join the advanced data analysis class and this proportion is 42.86% among those with a bachelor degree.\ndf %\u0026gt;% {round(prop.table(table(.$education, .$advanced_class),1)*100,2)} ## ## FALSE TRUE ## BA 57.14 42.86 ## MA 35.71 64.29 Here the average of both percentages is (64.29%+42.86)/2=53.57% which is equal to accurate calculation of the percentage of trainees who are intended to join the advanced data analysis training.\nround(prop.table(table(df$education, df$advanced_class),1)*100,1) %\u0026gt;% data.frame() %\u0026gt;% rename(education = Var1, advanced_class=Var2, percentage = Freq) %\u0026gt;% filter(advanced_class!=FALSE) %\u0026gt;% ggplot(aes(x=education, y=percentage, fill = education)) + geom_col()+ geom_text(aes(label=percentage), nudge_y = 2) + geom_hline(yintercept = (42.9+64.3)/2, linetype = \u0026quot;dashed\u0026quot;, color = \u0026quot;red\u0026quot;, size = 2 ) The reason is that there is an equal number of trainees with master and bachelor degrees.\ndf %\u0026gt;% {table(.$education)} ## ## BA MA ## 14 14 Summary Average of percentages would lead you to an inaccurate result unless all groups represent the equal sample size. The reason is simple, when two groups are different in size then the same percentage in both groups will give you two different numbers. For example, 10% of a group of 100 individuals is 10 while 10% of a group of 150 individuals is 15.\n ","date":1562284800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562284800,"objectID":"cd42a9db67b5f1101147a1ef7c63c8c2","permalink":"/post/calculating-averag-of-percentages/","publishdate":"2019-07-05T00:00:00Z","relpermalink":"/post/calculating-averag-of-percentages/","section":"post","summary":"body { text-align: justify}  Calculating the average of percentages is NOT similar to calculating the average of numbers.\nI am conducting data analysis trainings once every two months and at the end of each class I ask students if they want to join the advanced data analysis class that I organize once each year.","tags":null,"title":"Calculating Average of Percentages","type":"post"},{"authors":null,"categories":["R"],"content":"  Rename column names with R base functions Rename column names with dplyr Rename column names with data.table   There are several ways of renaming variables in R. In this post you will learn how to change a column name using base R function, the dplyr way and using data.table package.\nI will use the R built-in iris data frame.\nhead(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Rename column names with R base functions Let’s change Sepal.Length to S.P. The procedure is simple; get column names using names() or colnames, extract the specific column name, and assign a new name.\ncolnames(iris)[colnames(iris)==\u0026quot;Sepal.Length\u0026quot;] \u0026lt;- \u0026quot;S.P\u0026quot; head(iris) ## S.P Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa The code does the following:\ncolnames(iris) looks into all the names in the iris. names(iris) == \u0026quot;Sepal.Length\u0026quot; returns a vector with true and false values to extract the variable name you want to change. \u0026lt;- \u0026quot;S.P\u0026quot; assigns the new name.  You can also rename a variable by its index as well. For example, let’s change Sepal.Width [the second column] to S.W.\ncolnames(iris)[2] \u0026lt;- \u0026quot;S.W\u0026quot; head(iris) ## S.P S.W Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa  Rename column names with dplyr You can use rename() function to change column names as following. For instance, let’s change Petal.Length to P.L and Petal.Width to P.W.\n# install.packages(\u0026quot;dplyr\u0026quot;) library(dplyr) iris %\u0026gt;% rename( P.L = Petal.Length, P.W = Petal.Width ) %\u0026gt;% head() ## S.P S.W P.L P.W Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa  Rename column names with data.table setnames() function from data.table package can be used to rename a variable. The syntax is setnames(df, \u0026quot;old_name\u0026quot;, \u0026quot;new_name\u0026quot;). As an example, let’s change Species to SPECIES.\n# install.packages(\u0026quot;data.table\u0026quot;) library(data.table) setnames(iris, \u0026quot;Species\u0026quot;, \u0026quot;SPECIES\u0026quot;) colnames(iris) ## [1] \u0026quot;Sepal.Length\u0026quot; \u0026quot;Sepal.Width\u0026quot; \u0026quot;Petal.Length\u0026quot; \u0026quot;Petal.Width\u0026quot; \u0026quot;SPECIES\u0026quot;  ","date":1560902400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560902400,"objectID":"fe901af0fd88869a873d98d83f8bdea9","permalink":"/post/rename-data-frame-columns/","publishdate":"2019-06-19T00:00:00Z","relpermalink":"/post/rename-data-frame-columns/","section":"post","summary":"Rename column names with R base functions Rename column names with dplyr Rename column names with data.table   There are several ways of renaming variables in R. In this post you will learn how to change a column name using base R function, the dplyr way and using data.","tags":["R"],"title":"Rename Data Frame Columns","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]