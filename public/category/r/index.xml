<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Fahim Ahmad</title>
    <link>/category/r/</link>
      <atom:link href="/category/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Fahim Ahmad (2020)</copyright><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/category/r/</link>
    </image>
    
    <item>
      <title>Using Survey Weight</title>
      <link>/post/using-survey-weight-in-r/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>/post/using-survey-weight-in-r/</guid>
      <description>


&lt;p&gt;In R working with survey weight is made possible using &lt;code&gt;survey&lt;/code&gt; package. Let’s use below data frame as an exmaple here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1000)
age &amp;lt;- c(18:100)
age &amp;lt;- sample(age, 100, replace = TRUE)
gender &amp;lt;- c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;)
gender &amp;lt;- sample(gender, 100, replace = TRUE)
country &amp;lt;- c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;)
country &amp;lt;- sample(country, 100, replace = TRUE)

df &amp;lt;- data.frame(age, gender, country)

df$weight[df$gender==&amp;quot;Female&amp;quot;] &amp;lt;-50/sum(df$gender==&amp;quot;Female&amp;quot;)
df$weight[df$gender==&amp;quot;Male&amp;quot;] &amp;lt;-50/sum(df$gender==&amp;quot;Male&amp;quot;)

# summary of data
summary(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       age           gender            country              weight      
##  Min.   :18.00   Length:100         Length:100         Min.   :0.8929  
##  1st Qu.:38.75   Class :character   Class :character   1st Qu.:0.8929  
##  Median :54.50   Mode  :character   Mode  :character   Median :0.8929  
##  Mean   :55.79                                         Mean   :1.0000  
##  3rd Qu.:73.25                                         3rd Qu.:1.1364  
##  Max.   :97.00                                         Max.   :1.1364&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important variable here is the &lt;em&gt;weight&lt;/em&gt; variable which is constructed to balance the sex ratio.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;survey&lt;/code&gt; package, there is &lt;code&gt;svydesign()&lt;/code&gt; function that can be used to link a data frame with a weight.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;survey&amp;quot;)
library(survey)
df.w &amp;lt;- svydesign(ids = ~1, data = df, weights = ~weight)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting object is not a data frame anymore, but is a list of different objects that can be seen using &lt;code&gt;attributes()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attributes(df.w)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;cluster&amp;quot;    &amp;quot;strata&amp;quot;     &amp;quot;has.strata&amp;quot; &amp;quot;prob&amp;quot;       &amp;quot;allprob&amp;quot;   
## [6] &amp;quot;call&amp;quot;       &amp;quot;variables&amp;quot;  &amp;quot;fpc&amp;quot;        &amp;quot;pps&amp;quot;       
## 
## $class
## [1] &amp;quot;survey.design2&amp;quot; &amp;quot;survey.design&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, we need to use &lt;code&gt;survey&lt;/code&gt;’s own analytical functions. For example, here is a comparison of unweighted and weighted sex ratio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# unweighted
df %&amp;gt;%
{table(.$gender)} %&amp;gt;%
  prop.table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Female   Male 
##   0.44   0.56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# weighted
df.w %&amp;gt;%
  svytable(~gender, .) %&amp;gt;%
  prop.table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## gender
## Female   Male 
##    0.5    0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;svytable()&lt;/code&gt; can be used to create more than one-way frequency/percentage tables as well. For example, let’s create contingency table of &lt;code&gt;gender&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.w %&amp;gt;%
svytable(~gender+country, .) %&amp;gt;%
  prop.table(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         country
## gender           A         B
##   Female 0.5600000 0.4329897
##   Male   0.4400000 0.5670103&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below are other useful functions of &lt;code&gt;survey&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# to compute weighted mean
svymean(~age, df.w)
# to compute weighted quantiles
svyquantile(~age, df.w, c(.25, .50, .75))
# to compute weigted variance
svyvar(~age, df.w)
# to perform t-test
svyttest(age~gender, df.w)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Combining Multiple Plots using Patchwork</title>
      <link>/post/combining-multiple-plots-using-patchwork/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/combining-multiple-plots-using-patchwork/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#loading-required-packages&#34;&gt;loading required packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-example-plots&#34;&gt;creating example plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plots-using-the-patchwork-package&#34;&gt;Combining plots using the patchwork package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plots-beside-or-on-top-of-each-other&#34;&gt;Combining plots beside or on top of each other&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#controlling-the-legend&#34;&gt;Controlling the legend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-an-empty-area&#34;&gt;Adding an empty area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plot-and-table&#34;&gt;Combining plot and table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#annotation&#34;&gt;Annotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifying-the-result-of-the-patchwork&#34;&gt;Modifying the result of the patchwork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Data is just a collection of numbers until it is turned into a story. Sometimes, the combination of several plots is required for telling a great data-driven story.&lt;/p&gt;
&lt;p&gt;It is a while that I am using &lt;strong&gt;R&lt;/strong&gt; for data analysis and visualization and I have been using several packages for combining multiple plots. During this period, I found the &lt;strong&gt;patchwork&lt;/strong&gt; package the most straightforward way of combining multiple ggplot plots which I will explore it in this post.&lt;/p&gt;
&lt;div id=&#34;loading-required-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;loading required packages&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;patchwork&amp;quot;)
library(patchwork)
# install.packages(&amp;quot;gapminder&amp;quot;)
library(gapminder)
# install.packages(&amp;quot;dplyr&amp;quot;)
library(dplyr)
# install.packages()
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-example-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;creating example plots&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdpPercap_lifeExpt &amp;lt;- gapminder %&amp;gt;% 
  ggplot(aes(x=gdpPercap, y=lifeExp, col = continent)) +
  geom_point() + theme_bw() +
   labs(x = NULL, y = NULL)

lifeExpt_densityPlot &amp;lt;- gapminder %&amp;gt;%
  ggplot(aes(x=lifeExp, fill=continent)) +
  geom_density(alpha=0.4) + theme_bw() +
   labs(x = NULL, y = NULL)

lifeExpt_boxPlot &amp;lt;- gapminder %&amp;gt;% 
  ggplot(aes(x=continent, y=lifeExp, col=continent)) +
  geom_boxplot() +
  geom_jitter(width=0.2, alpha=0.4) + theme_bw() +
    labs(x = NULL, y = NULL)

gdpPercap_densityPlot &amp;lt;- gapminder %&amp;gt;%
  ggplot(aes(x = gdpPercap, fill = continent)) +
  geom_density(alpha = 0.4) + theme_bw() +
  labs(x = NULL, y = NULL)

gdpPercap_boxPlot &amp;lt;- gapminder %&amp;gt;% 
  ggplot(aes(x=continent, y=gdpPercap, col=continent)) +
  geom_boxplot() +
  geom_jitter(width=0.2, alpha=0.4) + theme_bw() +
    labs(x = NULL, y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plots-using-the-patchwork-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining plots using the patchwork package&lt;/h1&gt;
&lt;p&gt;Them most simple and straightforward way to combine plots is to use the &lt;code&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plots-beside-or-on-top-of-each-other&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining plots beside or on top of each other&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator combines plots without indicating anything about the desired layout. By default, the &lt;strong&gt;patchwork&lt;/strong&gt; package keeps the grid square and fill the grid in row order. This can be controlled by &lt;code&gt;plot_layout()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot +
  plot_layout(nrow = 3, byrow = F)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By having a one-row layout &lt;code&gt;plot_layout(nrow = 1)&lt;/code&gt; or one-column layout &lt;code&gt;plotlayout(ncol = 1)&lt;/code&gt;, plots can be placed on top of each other or beside each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Likewise, &lt;strong&gt;patchwork&lt;/strong&gt; provides two more operators. &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt; will place the plots beside each other, while &lt;code&gt;/&lt;/code&gt; will stack them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;controlling-the-legend&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Controlling the legend&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;plotlayout()&lt;/code&gt; function can also be used to place the legends in a common place instead of next to each plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lifeExpt_densityPlot + lifeExpt_boxPlot + gdpPercap_densityPlot + gdpPercap_boxPlot +
  plot_layout(nrow = 3, byrow = F, guides = &amp;#39;collect&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdpPercap_lifeExpt / ((lifeExpt_densityPlot / lifeExpt_boxPlot) | (gdpPercap_densityPlot / gdpPercap_boxPlot)) +
  plot_layout(guides = &amp;#39;collect&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-an-empty-area&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Adding an empty area&lt;/h1&gt;
&lt;p&gt;It is also possible to add an empty area between the plots by creating an empty &lt;em&gt;ggplot&lt;/em&gt; object using the &lt;code&gt;plot_spacer()&lt;/code&gt; and adding it to the patchwork.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / plot_spacer() / gdpPercap_lifeExpt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plot-and-table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining plot and table&lt;/h1&gt;
&lt;p&gt;Sometimes you may want to combine a non-ggplot content with a &lt;em&gt;ggplot&lt;/em&gt; plot. For instance, let’s combine the correlation table between life expectancy, GDP per capita, and population with the GDP per capita and life expectancy scatter plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;gridExtra&amp;quot;)
library(gridExtra)

correlation &amp;lt;- cor(gapminder[,c(4:6)], method = &amp;#39;pearson&amp;#39;) %&amp;gt;% round(digits = 3)
gdpPercap_lifeExpt / tableGrob(correlation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;annotation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Annotation&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;plot_annotation()&lt;/code&gt; function can be used to control different aspects of the annotation of the final plot such as title, subtitle, and caption.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt + 
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(title = &amp;#39;THIS IS TITLE&amp;#39;, subtitle = &amp;#39;this is subtitle&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;plot_annotation()&lt;/code&gt; function also provide the &lt;code&gt;tag_levels&lt;/code&gt;, &lt;code&gt;tag_prefix&lt;/code&gt;, and &lt;code&gt;tag_suffix&lt;/code&gt; arguments for auto-tagging to identify the subplots in text.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tag_levels&lt;/strong&gt; = A character vector defining the enumeration format to use at each level. Possible values are ‘a’ for lowercase letters, ‘A’ for uppercase letters, ‘1’ for numbers, ‘i’ for lowercase Roman numerals, and ‘I’ for uppercase Roman numerals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tag_prefix&lt;/strong&gt; = String that should appear before the tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tag_suffix&lt;/strong&gt; = String that should appear after the tag.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt +
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(tag_levels = &amp;quot;I&amp;quot;, tag_prefix = &amp;quot;Plot &amp;quot;, tag_suffix = &amp;quot; :&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modifying-the-result-of-the-patchwork&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modifying the result of the patchwork&lt;/h1&gt;
&lt;p&gt;The resulting object of the patchwork is a ggplot object. Which means if you continue adding objects such as geoms, scales, etc. it will be referenced to the last added plot. For example, let’s italicize the x-axis text and set the angle to 45.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt +
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(tag_levels = &amp;quot;I&amp;quot;, tag_prefix = &amp;quot;Plot &amp;quot;, tag_suffix = &amp;quot; :&amp;quot;) +
  theme(axis.text.x = element_text(angle = -45, face = &amp;#39;italic&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Often when it comes to modifying the plot it is more reasonable to modify everything at once. To do so, instead of the &lt;code&gt;+&lt;/code&gt; operator, the &lt;code&gt;&amp;amp;&lt;/code&gt; operator can be used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lifeExpt_densityPlot | lifeExpt_boxPlot) / gdpPercap_lifeExpt +
  plot_layout(guides = &amp;#39;collect&amp;#39;) +
  plot_annotation(tag_levels = &amp;quot;I&amp;quot;, tag_prefix = &amp;quot;Plot &amp;quot;, tag_suffix = &amp;quot; :&amp;quot;) &amp;amp;
  theme(axis.text.x = element_text(angle = -45, face = &amp;#39;italic&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-11-combining-multiple-plots-using-patchwork/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2: geom_histogram &amp; facet_wrap with different vertical lines on each facet</title>
      <link>/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/</guid>
      <description>


&lt;p&gt;The &lt;code&gt;geom_histogram()&lt;/code&gt; function from &lt;strong&gt;ggplot2&lt;/strong&gt; package is used to create a histogram plot. For example, let’s plot the distribution of &lt;code&gt;Sepal.Length&lt;/code&gt; from &lt;strong&gt;iris&lt;/strong&gt; data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
theme_set(theme_bw())
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To add a vertical line to show the mean value of &lt;code&gt;Sepal.Length&lt;/code&gt;, we can use &lt;code&gt;geom_vline()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;) +
  geom_vline(data = iris, aes(xintercept = mean(Sepal.Length)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One of the most powerful aspects of &lt;strong&gt;ggplot2&lt;/strong&gt; is the ease with which you can create multiple sub-plots using &lt;code&gt;facet_wrap()&lt;/code&gt;. For example, let’s plot the distribution of &lt;code&gt;Sepal.Length&lt;/code&gt; by each group of &lt;code&gt;Species&lt;/code&gt; from &lt;strong&gt;iris&lt;/strong&gt; data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;) +
  facet_wrap(~Species) +
  geom_vline(data = iris, aes(xintercept = mean(Sepal.Length)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;While using &lt;code&gt;facet_wrap()&lt;/code&gt; each plot shows a different subset of the data, however, the &lt;code&gt;geom_vline()&lt;/code&gt; adds the vertical line on the same x-intercept in all plots. For instance, in the above histograms the vertical line shows the overall mean of &lt;code&gt;Sepal.Length&lt;/code&gt; column instead of mean of each group.&lt;/p&gt;
&lt;p&gt;It’s more practical to add a vertical line on each facet showing the mean for each group of data. To do so, a separate data frame containing the mean of each group should be created to use with &lt;code&gt;geom_vline()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
vline &amp;lt;- summarise(group_by(iris,Species), mean = mean(Sepal.Length))
vline&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   Species     mean
##   &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 setosa      5.01
## 2 versicolor  5.94
## 3 virginica   6.59&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = &amp;quot;orange&amp;quot;) +
  facet_wrap(~Species) +
  geom_vline(data = vline, aes(xintercept = mean))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2022-04-03-ggplot2-facet-wrap-with-different-vertical-lines-on-each-facet/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Relationship Between Variables | scatter-plot</title>
      <link>/post/exploring-relationship-between-variables-scatter-plot/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      <guid>/post/exploring-relationship-between-variables-scatter-plot/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#when-to-use-scatterplot&#34;&gt;When to use scatterplot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scatterplot-using-the-base-r-functions&#34;&gt;Scatterplot using the base R functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scatterplot-using-ggplot2-package&#34;&gt;Scatterplot using ggplot2 package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;when-to-use-scatterplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;When to use scatterplot?&lt;/h3&gt;
&lt;p&gt;When dealing with numerical data, the most common way to graphically explore the patterns and relationships between variables and draw a conclusion about how variables correlate to one another is by plotting the data points using a scatterplot. A scatterplot uses dots/markers to represent values for two numeric variables where the position of each dot indicates values for an individual data point in the (x,y) coordinates.&lt;/p&gt;
&lt;p&gt;Scatterplots are used primarily to determine the &lt;strong&gt;strength&lt;/strong&gt; and &lt;strong&gt;direction&lt;/strong&gt; of the relationship between two numeric variables.&lt;/p&gt;
&lt;p&gt;The direction of the relationship is determined by how &lt;code&gt;y&lt;/code&gt; variable changes by an increase in &lt;code&gt;x&lt;/code&gt; variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the &lt;code&gt;y&lt;/code&gt; variable tends to increase by increasing the &lt;code&gt;x&lt;/code&gt; variable, it shows the positive relationship between two variables.&lt;/li&gt;
&lt;li&gt;When the &lt;code&gt;y&lt;/code&gt; variable tends to decrease by increasing the &lt;code&gt;x&lt;/code&gt; variable, it shows the negative relationship between two variables.&lt;/li&gt;
&lt;li&gt;If it is impossible to establish either of the above criteria, there is not any meaningful relationship between the variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The strength of the relationship is determined by how spread the data points are in the (x,y) coordinates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the data points lie exactly along a straight line, it shows the perfect relationship.&lt;/li&gt;
&lt;li&gt;When the data points are closed to one another and are concentrated near the straight line, it shows a strong relationship.&lt;/li&gt;
&lt;li&gt;If the data points appeared randomly scattered or equally distributed across the plot, it shows no relationship or a weak relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/ExploringRelationshipBetweenVariablesscatterplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scatterplot-using-the-base-r-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatterplot using the base R functions&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;plot(x,y)&lt;/code&gt; function is used to create a scatterplot where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are columns to be plotted in the x-axis and y-axis, respectively. Each point’s horizontal position indicates the value of &lt;code&gt;x&lt;/code&gt; (column that is plotted in the x-axis) and the vertical position of each point indicates the value of &lt;code&gt;y&lt;/code&gt; (column that is plotted in the y-axis).&lt;/p&gt;
&lt;p&gt;For example, you collect data from 30 individuals about their education level, age, and salary as well as the gender of each individual as below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(
  gender = c(&amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;),
  age =       c(30,    25,    27,    28,    24,    29,    27,    24,    22,    NA,    NA,    21,    25,    27,    29,    24,    22,    18,    NA,    25,    22,    23,    27,    NA,    18,    23,    19,    26,    23, 22),
  salary =    c(25000, 31000, 35000, 27000, 32000, 26000, 31000, 30000, 35000, 38000, 37000, 36000, 33000, 30000, 25000, 29000, 37000, 28000, 38000, 31000, 37000, 34000, 31000, 38000, 38000, 35000, 37000, 29000, 37000, 36000),
  education = c(9,     12,    16,    10,    14,    10,    11,    14,    16,    18,    18,    NA,    14,    12,    9,     13,    15,    10,    18,    12,    17,    16,    13,    18,    NA,    16,    NA,    12,    18, 17)
)

df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    gender age salary education
## 1    Male  30  25000         9
## 2    Male  25  31000        12
## 3    Male  27  35000        16
## 4    Male  28  27000        10
## 5    Male  24  32000        14
## 6    Male  29  26000        10
## 7    Male  27  31000        11
## 8    Male  24  30000        14
## 9    Male  22  35000        16
## 10 Female  NA  38000        18
## 11 Female  NA  37000        18
## 12 Female  21  36000        NA
## 13 Female  25  33000        14
## 14 Female  27  30000        12
## 15 Female  29  25000         9
## 16 Female  24  29000        13
## 17 Female  22  37000        15
## 18 Female  18  28000        10
## 19 Female  NA  38000        18
## 20 Female  25  31000        12
## 21   Male  22  37000        17
## 22   Male  23  34000        16
## 23   Male  27  31000        13
## 24   Male  NA  38000        18
## 25 Female  18  38000        NA
## 26 Female  23  35000        16
## 27 Female  19  37000        NA
## 28 Female  26  29000        12
## 29 Female  23  37000        18
## 30   Male  22  36000        17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By plotting the data points we can explore the relationship between age, education, and salary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot Age against Salary
plot(df$age, df$salary, main = &amp;#39;Age vs. Salary&amp;#39;)

# plot Education against Salary
plot(df$education, df$salary, main = &amp;#39;Education vs. Salary&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The plot shown above reveals that those who are younger tend to have a higher salary. Moreover, a higher education level can predict a higher salary as well.&lt;/p&gt;
&lt;p&gt;Let’s plot age against education to explore the relationship between the two variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(df$age, df$education, main = &amp;quot;Age vs. Education&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to explore the relationship between age, salary, and education in one plot by creating a scatterplot matrix using &lt;code&gt;pairs()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pairs(~salary+education+age, data = df, main = &amp;quot;Scatterplot Matrix&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The above plot confirms the same findings. It shows a positive correlation between education and salary, however, there is a negative correlation between age and salary. Furthermore, those who are younger tend to have a higher education level.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scatterplot-using-ggplot2-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatterplot using ggplot2 package&lt;/h3&gt;
&lt;p&gt;As I mentioned in the previous posts, it is preferred to use the ggplot2 packages for visualization because the resulting plot is easy to modify and it is more popular among R users to use the ggplot2 package. The &lt;code&gt;geom_point()&lt;/code&gt; function can be used from &lt;strong&gt;ggplot2&lt;/strong&gt; package to create scatterplots. For example, let’s plot age against salary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

ggplot(df, aes(x = age, y = salary)) +
  geom_point() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The common issue with scatterplot is when we have lots of data, the points will overlap (known as overplotting). There are several ways to alleviate this issue. The most common way is to use &lt;code&gt;geom_jitter()&lt;/code&gt; instead of &lt;code&gt;geom_point()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;geom_jitter()&lt;/code&gt; adds a small amount of random noise to the location of each point to make the plot easier to read. For example, compare the below plot to the one above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary)) +
  geom_jitter() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Scatterplots are very useful in identifying the relationship between two numerical variables among several groups as well by adding a third variable. When the third variable is categorical data, the most common way is by giving the dots a distinct hue to show the membership of each point to a respective group. For instance, let’s plot the relationship between age and salary among males and females.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary, color = gender)) +
  geom_jitter() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary, by Gender&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To depict the third variable that has numeric values, the common way is to change the dots’ size based on the values of the third variable, where larger points indicate higher values and smaller points indicate lower values. Moreover, hue can also be used when the third variable has numeric values by using a sequence of colors rather than using distinct colors for points like in the categorical case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary, size = education)) +
  geom_jitter() +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df, aes(x = age, y = salary, color = education)) +
  geom_jitter() +
  scale_fill_gradient(low = &amp;quot;orange&amp;quot;, high = &amp;quot;red&amp;quot;, na.value = &amp;quot;grey50&amp;quot;, aesthetics = &amp;quot;color&amp;quot;) +
  theme_bw() +
  labs(title = &amp;quot;Age vs. Salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2021-08-10-exploring-relationship-between-variables-scatter-plot/index_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Also, adding another dimension to create a 3D scatterplot can be used to depict the third variable that has numeric values as another alternative rather than changing the dots’ size. Since the ggplot2 package does not produce plots with three dimensions, I use the plotly package as an example here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plotly)
plot_ly(df, x = ~age, y = ~salary, z = ~education, type = &amp;quot;scatter3d&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;visdat&#34;:{&#34;de1a7254039c&#34;:[&#34;function () &#34;,&#34;plotlyVisDat&#34;]},&#34;cur_data&#34;:&#34;de1a7254039c&#34;,&#34;attrs&#34;:{&#34;de1a7254039c&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;z&#34;:{},&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;type&#34;:&#34;scatter3d&#34;}},&#34;layout&#34;:{&#34;margin&#34;:{&#34;b&#34;:40,&#34;l&#34;:60,&#34;t&#34;:25,&#34;r&#34;:10},&#34;scene&#34;:{&#34;xaxis&#34;:{&#34;title&#34;:&#34;age&#34;},&#34;yaxis&#34;:{&#34;title&#34;:&#34;salary&#34;},&#34;zaxis&#34;:{&#34;title&#34;:&#34;education&#34;}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;showlegend&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;config&#34;:{&#34;showSendToCloud&#34;:false},&#34;data&#34;:[{&#34;x&#34;:[30,25,27,28,24,29,27,24,22,25,27,29,24,22,18,25,22,23,27,23,26,23,22],&#34;y&#34;:[25000,31000,35000,27000,32000,26000,31000,30000,35000,33000,30000,25000,29000,37000,28000,31000,37000,34000,31000,35000,29000,37000,36000],&#34;z&#34;:[9,12,16,10,14,10,11,14,16,14,12,9,13,15,10,12,17,16,13,16,12,18,17],&#34;type&#34;:&#34;scatter3d&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;}},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;},&#34;frame&#34;:null}],&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Detecting Duplicates (base R vs. dplyr)</title>
      <link>/post/detecting-duplicates/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/post/detecting-duplicates/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#removing-duplicates-based-on-a-single-variable&#34;&gt;Removing duplicates based on a single variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#removing-duplicates-based-on-the-combination-of-multiple-variables&#34;&gt;Removing duplicates based on the combination of multiple variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;imgs/Duplicates.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sometimes you may encounter duplicated values in the data which might cause problems depending on how you plan to use the data. In this post, I provide an overview of &lt;code&gt;duplicated()&lt;/code&gt; function from base R and the &lt;code&gt;distinct()&lt;/code&gt; function from &lt;strong&gt;dplyr&lt;/strong&gt; package to detect and remove duplicates.&lt;/p&gt;
&lt;p&gt;I will be using the following data frame as an example in this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1000)
df &amp;lt;- data.frame(
  ID = sample(paste0(&amp;quot;ID-00&amp;quot;, 1:7), 10, replace = T),
  value_1 = sample(1:7, 10, replace = T),
  value_2 = sample(2:5, 10, replace = T)
)

df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        ID value_1 value_2
## 1  ID-004       5       2
## 2  ID-003       6       5
## 3  ID-006       1       3
## 4  ID-003       1       4
## 5  ID-005       5       5
## 6  ID-003       2       3
## 7  ID-005       2       2
## 8  ID-002       4       3
## 9  ID-006       7       2
## 10 ID-006       2       3&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;removing-duplicates-based-on-a-single-variable&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Removing duplicates based on a single variable&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;duplicated()&lt;/code&gt; function returns a logical vector where &lt;code&gt;TRUE&lt;/code&gt; specifies which rows of the data frame are duplicates.&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;duplicated(df[&amp;quot;ID&amp;quot;])&lt;/code&gt; returns the following vector.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##  [1] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;duplicated()&lt;/code&gt; function preserves the first occurrence in the process of identifying the duplicate values, if you want to consider the duplication from the reverse side, then set the &lt;code&gt;fromLast&lt;/code&gt; argument to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s use the above vector to exclude the duplicated values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[!duplicate_rows, ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       ID value_1 value_2
## 1 ID-004       5       2
## 2 ID-003       6       5
## 3 ID-006       1       3
## 5 ID-005       5       5
## 8 ID-002       4       3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative way to select unique values is &lt;code&gt;dplyr::distinct()&lt;/code&gt; function that yields a similar result as above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dplyr::distinct(df, ID, .keep_all = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       ID value_1 value_2
## 1 ID-004       5       2
## 2 ID-003       6       5
## 3 ID-006       1       3
## 4 ID-005       5       5
## 5 ID-002       4       3&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The .&lt;code&gt;keep_all&lt;/code&gt; argument is used to retain all other columns in the output data frame.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;removing-duplicates-based-on-the-combination-of-multiple-variables&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Removing duplicates based on the combination of multiple variables&lt;/h1&gt;
&lt;p&gt;The above chunks of codes remove the duplicated rows based on a single column. What if we want to remove duplicates based on more than a single column?&lt;/p&gt;
&lt;p&gt;One way is to concatenate the columns in which you want to check the presence of duplicates. For example, let’s remove the rows where &lt;strong&gt;value_1&lt;/strong&gt; and &lt;strong&gt;value_2&lt;/strong&gt; are duplicated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- dplyr::mutate(df, value_1_2 = paste(value_1, value_2))
df[!duplicated(df[c(&amp;quot;value_1_2&amp;quot;)]), ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       ID value_1 value_2 value_1_2
## 1 ID-004       5       2       5 2
## 2 ID-003       6       5       6 5
## 3 ID-006       1       3       1 3
## 4 ID-003       1       4       1 4
## 5 ID-005       5       5       5 5
## 6 ID-003       2       3       2 3
## 7 ID-005       2       2       2 2
## 8 ID-002       4       3       4 3
## 9 ID-006       7       2       7 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is an efficient way of detecting duplicates based on the combination of multiple columns without concatenating the values of the columns in which we want to identify the duplicated values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# using duplicated() function
df[!duplicated(df[c(&amp;quot;value_1&amp;quot;, &amp;quot;value_2&amp;quot;)]), ]

# using distinct() function
dplyr::distinct(df, value_1, value_2, .keep_all = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       ID value_1 value_2 value_1_2
## 1 ID-004       5       2       5 2
## 2 ID-003       6       5       6 5
## 3 ID-006       1       3       1 3
## 4 ID-003       1       4       1 4
## 5 ID-005       5       5       5 5
## 6 ID-003       2       3       2 3
## 7 ID-005       2       2       2 2
## 8 ID-002       4       3       4 3
## 9 ID-006       7       2       7 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It seems that both approaches work very well; however, the advantage of using &lt;code&gt;duplicated()&lt;/code&gt; function from base R is it returns a logical vector identifying the duplicated rows that can be used to either drop the duplicated rows or keep only these rows for further investigation while the &lt;code&gt;distinct()&lt;/code&gt; function directly removes the duplicated rows without specifying which row has duplicate values.&lt;/p&gt;
&lt;p&gt;For instance, let’s keep the duplicated ID numbers only.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[duplicated(df[&amp;quot;ID&amp;quot;], fromLast = F), ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        ID value_1 value_2 value_1_2
## 4  ID-003       1       4       1 4
## 6  ID-003       2       3       2 3
## 7  ID-005       2       2       2 2
## 9  ID-006       7       2       7 2
## 10 ID-006       2       3       2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned above, the &lt;code&gt;duplicated()&lt;/code&gt; function does not assign the first occurrence in the process of identifying the duplicated values as duplicates. Thus, we need to count backward as well to consider the duplication from the reverse side. To do so, we need to set the &lt;code&gt;fromLast&lt;/code&gt; argument to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[duplicated(df[&amp;quot;ID&amp;quot;], fromLast = F) | duplicated(df[&amp;quot;ID&amp;quot;], fromLast = T), ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        ID value_1 value_2 value_1_2
## 2  ID-003       6       5       6 5
## 3  ID-006       1       3       1 3
## 4  ID-003       1       4       1 4
## 5  ID-005       5       5       5 5
## 6  ID-003       2       3       2 3
## 7  ID-005       2       2       2 2
## 9  ID-006       7       2       7 2
## 10 ID-006       2       3       2 3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Measures of Dispersion</title>
      <link>/post/measures-of-dispersion-using-r/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/measures-of-dispersion-using-r/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#absolute-measures-of-dispersion&#34;&gt;Absolute measures of dispersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#relative-measures-of-dispersion&#34;&gt;Relative measures of dispersion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the previous post I described the measures of central tendency. But the central tendency is not the only thing you can tell interesting facts about the data and is not the only way by which you can get to know about the concentration of the data. In this post, you will learn about the measures of dispersion as part of the descriptive statistics.&lt;/p&gt;
&lt;p&gt;As the name suggests, the measures of dispersion show the extent of variability and the scattering of the data points. The main idea of the measures of dispersion is to get to know how the data are spread and how much the data points vary from the average value.&lt;/p&gt;
&lt;p&gt;Two distinct sets of data may have the same central value, but a completely different level of variation. Therefore, an adequate description of the data should include both of these characteristics. In other words, the combination of measures of the central tendency and measures of dispersion help to understand the distribution of the data.&lt;/p&gt;
&lt;p&gt;A measure of dispersion is zero if all the data points are the same and increases as the data become more diverse. There are mainly two types of measures of dispersion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Absolute measures of dispersion&lt;/li&gt;
&lt;li&gt;Relative measures of dispersion&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;absolute-measures-of-dispersion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Absolute measures of dispersion&lt;/h2&gt;
&lt;p&gt;Absolute measures of dispersion express the scattering of the data points in terms of distance such as range or in terms of deviation from the central value such as variance and standard deviation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Range:&lt;/strong&gt; Range is defined as the difference between the smallest and the largest value in a set of data. The range is easy to compute; however, it is influenced by extreme values. Therefore, it is not a reliable measure of dispersion.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[Range = X_{max} - X_{min}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quartile deviation:&lt;/strong&gt; Quartile deviation is defined as half of the distance between the first and third quartile&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. Quartile deviation is not influenced by extreme values. However, its demerit is that it ignores 50% of the data. Therefore, variance and standard deviation are suggested as the most reliable measures of dispersion.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[Quartile \space deviation = \frac{Q_{3}-Q_{1}}{\ 2}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variance and Standard Deviation&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/strong&gt; These measures of dispersion tell you how much spread out the data points are from the mean. To find out the variance, deduct each value from the mean, square it, sum each square, and divide it by the total number of values.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[Variance = \frac{∑(x-\bar{x})^2}{\ {n-1}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Standard deviation is the square root of the variance. In the asymmetrical distribution, 68.25% of data points fall between &lt;strong&gt;mean ± 1s.d&lt;/strong&gt;; 95.45% of data points fall between &lt;strong&gt;mean ± 2s.d&lt;/strong&gt;; 99.73% of the data points fall between &lt;strong&gt;mean ± 3s.d&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Mathematically, the standard deviation can be expressed as below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[{Standard \space deviation} = {\sqrt\frac{∑(x-\bar{x})^2}{\ {n-1}}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;No panic! In R, you can easily compute the range, quartile deviation, variance, and standard deviation. Suppose you have the weekly expenditures of two projects over 10 weeks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##    Projects Expenditures
## 1  project1        10000
## 2  project1        15400
## 3  project1        14250
## 4  project1        13000
## 5  project1        11250
## 6  project1        10450
## 7  project1         9035
## 8  project1        12500
## 9  project1        14125
## 10 project1        11240
## 11 project2        10500
## 12 project2        15000
## 13 project2        14300
## 14 project2        12500
## 15 project2        11300
## 16 project2        10500
## 17 project2         8530
## 18 project2        12500
## 19 project2        14120
## 20 project2        11320&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The below functions can be used to compute the measures of dispersion.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

df %&amp;gt;% 
  group_by(Projects) %&amp;gt;% 
  summarise(Range = max(Expenditures) - min(Expenditures),
            &amp;#39;Quartile Deviation&amp;#39; = IQR(Expenditures)/2,
            Variance = var(Expenditures),
            &amp;#39;Standard Deviation&amp;#39; = sd(Expenditures)) %&amp;gt;% 
  kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Projects&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Range&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Quartile Deviation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variance&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Standard Deviation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;project1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6365&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1598.125&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4285078&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2070.043&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;project2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6470&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1507.500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4082801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2020.594&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As the above table shows, based on &lt;strong&gt;Range&lt;/strong&gt; as a measure of dispersion that includes only minimum and maximum values, the data points in the second group (project2) are more scattered while based on the &lt;strong&gt;Standard deviation&lt;/strong&gt; the data points in that group are less scattered&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;relative-measures-of-dispersion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Relative measures of dispersion&lt;/h2&gt;
&lt;p&gt;For comparing data among two or more than two groups that differ significantly in their averages, and for unit free comparison the relative measures of dispersion are used which is known as the coefficient of dispersion (C.D).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coefficient of dispersion in terms of range:&lt;/strong&gt; C.D in terms of range is the distance between the minimum value and maximum value divided by sum of the minimum and maximum values.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[{C.D\space in\space terms\space of\space range} = {\frac{X_{max} - X_{min}}{\ X_{max} + X_{min}}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coefficient of dispersion in terms of quartile deviation:&lt;/strong&gt; C.D in terms of quartile deviation is the distance between first quartile and third quartile divided by the sum of the first and third quartiles.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[{C.D\space in\space terms\space of\space quartile \space deviation} = {\frac{Q_{3} - Q_{1}}{\ Q_{3} + Q_{1}}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coefficient of dispersion in terms of standard deviation:&lt;/strong&gt; C.D in terms of standard deviation is defined as the standard deviation divided by the mean.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[{C.D\space in\space terms\space of\space S.D} = {\frac{S.D}{\bar{X}}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coefficient of Variation (C.V):&lt;/strong&gt; 100 times the coefficient of dispersion based on the standard deviation is the coefficient of variation.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[C.V = 100 * \frac{S.D}{\bar{X}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Let’s find the relative measures of dispersion for the above data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)

df %&amp;gt;% 
  group_by(Projects) %&amp;gt;% 
  summarise(&amp;#39;C.D in terms of range&amp;#39; = (max(Expenditures)-min(Expenditures)/max(Expenditures)+min(Expenditures)),
            &amp;#39;C.D in terms of standard deviation&amp;#39; = sd(Expenditures)/mean(Expenditures),
            # &amp;#39;Coefficient of Variation&amp;#39; = 100 * sd(Expenditures)/mean(Expenditures),
            &amp;#39;Coefficient of Variation&amp;#39; = cv(Expenditures)) %&amp;gt;% 
  kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;24%&#34; /&gt;
&lt;col width=&#34;38%&#34; /&gt;
&lt;col width=&#34;27%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Projects&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;C.D in terms of range&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;C.D in terms of standard deviation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Coefficient of Variation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;project1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24434.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1707252&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.07252&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;project2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23529.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1675868&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.75868&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Quartiles are values that divide the data into quarters. The first quartile (Q1) is the middle number between the smallest number and the median of the data. The second quartile, (Q2) is the median of the data set. The third quartile (Q3) is the middle number between the median and the largest number.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;In R, the var() and sd() functions compute the sample variance and sample standard deviation. Therefore, the n-1 is used in the denominator.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Standard deviation as measure of dispersion to compare variability among two groups should be used only when both groups have the same central value. When the central value of both groups differ widely, the coefficient of dispersion in terms of standard deviation or coefficient of variance should be used.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Distribution of Data | box-plot</title>
      <link>/post/visualizing-distribution-of-data-in-r-box-plot/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualizing-distribution-of-data-in-r-box-plot/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-box-plot&#34;&gt;Why box-plot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#box-plot-using-the-base-r-function&#34;&gt;Box-plot using the base R function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#box-plot-using-the-ggplot2-package&#34;&gt;Box-plot using the ggplot2 package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;why-box-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why box-plot?&lt;/h2&gt;
&lt;p&gt;Box-plot is one of the effective ways to visually represent the distribution of data and it gives you an overall idea about how the data looks. Also, it is one of the best tools to identify the outliers to check if an association you find in your analysis can be explained by the presence of potential unusual observations.&lt;/p&gt;
&lt;p&gt;The graph shown below is an example of box-plot where the box shows the interquartile range (IQR), the horizontal line inside the box presents the median (50th percentile), and the whiskers (lines extending from the box) represent maximum value that is not an outlier (1.5 IQR above the third quartile) and minimum value that is not an outlier (1.5 IQR below the first quartile). All individual points outside the whiskers are considered as outliers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;imgs/ComparingDistributionofDatainRbox-plot.jpg&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First quartile (Q1 / 25&lt;sup&gt;th&lt;/sup&gt; Percentile) also knows as lower quartile is the center of the lower half of the data.&lt;/li&gt;
&lt;li&gt;Median (Q2 / 50&lt;sup&gt;th&lt;/sup&gt; Percentile) is the middle value of the data.&lt;/li&gt;
&lt;li&gt;Third quartile (Q3 / 75&lt;sup&gt;th&lt;/sup&gt; Percentile) also known as upper quartile is center of the upper half of the data.&lt;/li&gt;
&lt;li&gt;Interquartile range (IQR) shows the middle half of the data. (distance between first and third quartile)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Box-plots are usually a useful way to compare the distribution of data among two or more groups, or to compare the distribution of data among one or more than one group across time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-plot-using-the-base-r-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box-plot using the base R function&lt;/h2&gt;
&lt;p&gt;Let’s use the below data as an example. The first column shows the gender of each observation, the values in the second column are pre-test scores and the values in the third column are post-test scores.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(
  gender    = c(&amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Female&amp;quot;),
  pre_test =    c(30,   26, 24, 19, 27, 21, 31, 16, 16, 26, 28, 29, 36, 25, 27, 24, 32, 30, 33, 26),
  post_test =   c(35,   31, 29, 24, 32, 26, 36, 21, 21, 31, 33, 34, 41, 30, 32, 29, 37, 35, 38, 31)
)

df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    gender pre_test post_test
## 1    Male       30        35
## 2    Male       26        31
## 3    Male       24        29
## 4    Male       19        24
## 5    Male       27        32
## 6    Male       21        26
## 7    Male       31        36
## 8    Male       16        21
## 9    Male       16        21
## 10 Female       26        31
## 11 Female       28        33
## 12 Female       29        34
## 13 Female       36        41
## 14 Female       25        30
## 15 Female       27        32
## 16 Female       24        29
## 17 Female       32        37
## 18 Female       30        35
## 19 Female       33        38
## 20 Female       26        31&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The base R function to build a boxplot is &lt;code&gt;boxplot()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(df$pre_test, main=&amp;quot;Pre-test&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-08-visualizing-distribution-of-data-in-r-box-plot/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s combine both plots for better comparison.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(df[,c(&amp;quot;pre_test&amp;quot;, &amp;quot;post_test&amp;quot;)], main = &amp;quot;Pre-test vs Post test&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-08-visualizing-distribution-of-data-in-r-box-plot/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-plot-using-the-ggplot2-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box-plot using the ggplot2 package&lt;/h2&gt;
&lt;p&gt;I prefer the ggplot2 plots because the output is nicer and importantly it can be easily modified compared to base R graphs, moreover, it is more popular among R users.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;geom_box()&lt;/code&gt; function from the &lt;strong&gt;ggplot2&lt;/strong&gt; package can be used to create a box-plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;ggplot2&amp;quot;)
library(ggplot2)

ggplot(df) +
  geom_boxplot(aes(y = pre_test, x = &amp;quot;1: Pre-test&amp;quot;)) +
  geom_boxplot(aes(y = post_test, x = &amp;quot;2: Post-test&amp;quot;)) +
  theme_bw() +
  labs(title = &amp;quot;Pre-test vs. Post-test scores&amp;quot;, x = NULL, y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-08-visualizing-distribution-of-data-in-r-box-plot/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The plot on the left side shows the distribution of pre-test scores and the one on the right side shows the distribution of post-test scores. The above plot shows that average post-test score (31.5) is higher compare to the pre-test (26.5).&lt;/p&gt;
&lt;p&gt;It is also possible to use box-plot to visualize the distribution of data by categories of another variable as well, see below example for instance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df) +
  geom_boxplot(aes(y = pre_test, x = &amp;quot;1: Pre-test&amp;quot;, fill = gender), alpha = 0.25) +
  geom_boxplot(aes(y = post_test, x = &amp;quot;2: Post-test&amp;quot;, fill = gender), alpha = 0.25) +
  theme_bw() +
  labs(title = &amp;quot;Pre-test vs. Post-test scores, by gender&amp;quot;, x = NULL, y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-08-visualizing-distribution-of-data-in-r-box-plot/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The above plot shows that on average females have higher score (boxes in red color) compare to those of males (boxes in blue color) in both pre-test and post-test.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rename Data Frame Columns</title>
      <link>/post/rename-data-frame-columns/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/post/rename-data-frame-columns/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rename-column-names-with-r-base-functions&#34;&gt;Rename column names with R base functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rename-column-names-with-dplyr&#34;&gt;Rename column names with dplyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rename-column-names-with-data.table&#34;&gt;Rename column names with data.table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;There are several ways of renaming variables in R. In this post you will learn how to change a column name using base R function, the dplyr way and using data.table package.&lt;/p&gt;
&lt;p&gt;I will use the R built-in &lt;strong&gt;iris&lt;/strong&gt; data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;rename-column-names-with-r-base-functions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rename column names with R base functions&lt;/h1&gt;
&lt;p&gt;Let’s change &lt;strong&gt;Sepal.Length&lt;/strong&gt; to &lt;strong&gt;S.P&lt;/strong&gt;. The procedure is simple; get column names using &lt;code&gt;names()&lt;/code&gt; or &lt;code&gt;colnames&lt;/code&gt;, extract the specific column name, and assign a new name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(iris)[colnames(iris)==&amp;quot;Sepal.Length&amp;quot;] &amp;lt;- &amp;quot;S.P&amp;quot;
head(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   S.P Sepal.Width Petal.Length Petal.Width Species
## 1 5.1         3.5          1.4         0.2  setosa
## 2 4.9         3.0          1.4         0.2  setosa
## 3 4.7         3.2          1.3         0.2  setosa
## 4 4.6         3.1          1.5         0.2  setosa
## 5 5.0         3.6          1.4         0.2  setosa
## 6 5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code does the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;colnames(iris)&lt;/code&gt; looks into all the names in the &lt;strong&gt;iris&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;names(iris) == &amp;quot;Sepal.Length&amp;quot;&lt;/code&gt; returns a vector with true and false values to extract the variable name you want to change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;- &amp;quot;S.P&amp;quot;&lt;/code&gt; assigns the new name.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can also rename a variable by its index as well. For example, let’s change &lt;strong&gt;Sepal.Width&lt;/strong&gt; [the second column] to &lt;strong&gt;S.W&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(iris)[2] &amp;lt;- &amp;quot;S.W&amp;quot;
head(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   S.P S.W Petal.Length Petal.Width Species
## 1 5.1 3.5          1.4         0.2  setosa
## 2 4.9 3.0          1.4         0.2  setosa
## 3 4.7 3.2          1.3         0.2  setosa
## 4 4.6 3.1          1.5         0.2  setosa
## 5 5.0 3.6          1.4         0.2  setosa
## 6 5.4 3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rename-column-names-with-dplyr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rename column names with dplyr&lt;/h1&gt;
&lt;p&gt;You can use &lt;code&gt;rename()&lt;/code&gt; function to change column names as following. For instance, let’s change &lt;strong&gt;Petal.Length&lt;/strong&gt; to &lt;strong&gt;P.L&lt;/strong&gt; and &lt;strong&gt;Petal.Width&lt;/strong&gt; to &lt;strong&gt;P.W&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;dplyr&amp;quot;)
library(dplyr)

iris %&amp;gt;%
  rename(
    P.L = Petal.Length,
    P.W = Petal.Width
  ) %&amp;gt;%
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   S.P S.W P.L P.W Species
## 1 5.1 3.5 1.4 0.2  setosa
## 2 4.9 3.0 1.4 0.2  setosa
## 3 4.7 3.2 1.3 0.2  setosa
## 4 4.6 3.1 1.5 0.2  setosa
## 5 5.0 3.6 1.4 0.2  setosa
## 6 5.4 3.9 1.7 0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rename-column-names-with-data.table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rename column names with data.table&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;setnames()&lt;/code&gt; function from &lt;strong&gt;data.table&lt;/strong&gt; package can be used to rename a variable. The syntax is &lt;code&gt;setnames(df, &amp;quot;old_name&amp;quot;, &amp;quot;new_name&amp;quot;)&lt;/code&gt;. As an example, let’s change &lt;strong&gt;Species&lt;/strong&gt; to &lt;strong&gt;SPECIES&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;data.table&amp;quot;)
library(data.table)
setnames(iris,
         &amp;quot;Species&amp;quot;, &amp;quot;SPECIES&amp;quot;)
colnames(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Sepal.Length&amp;quot; &amp;quot;Sepal.Width&amp;quot;  &amp;quot;Petal.Length&amp;quot; &amp;quot;Petal.Width&amp;quot;  &amp;quot;SPECIES&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
